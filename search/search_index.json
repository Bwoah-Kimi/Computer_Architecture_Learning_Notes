{"config":{"lang":["zh","en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"0_index/","title":"Welcome to my Learning Notes on Computer Architecture!","text":"<p>\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e9b\u5173\u4e8e\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u7684\u5b66\u4e60\u7b14\u8bb0\u3002</p> <p>\u5173\u4e8e\u6587\u6863</p> <p>\u6587\u6863\u5185\u5bb9\u5728\u4e0d\u65ad\u66f4\u65b0\u4e2d\u3002\u60f3\u8981\u50ac\u66f4\u53ef\u4ee5\u5230 Github \u4ed3\u5e93\u4e2d\u63d0\u51fa Issue :) \u5982\u679c\u6709\u6539\u8fdb\u610f\u89c1\uff0c\u6b22\u8fce\u63d0\u4ea4 Pull Request\uff01</p>"},{"location":"0_index/#_1","title":"\u66f4\u65b0\u65e5\u5fd7","text":""},{"location":"0_index/#2024-winter-2025-spring","title":"2024 Winter - 2025 Spring","text":"<ul> <li>\u4f7f\u7528 Mkdocs \u6a21\u677f\uff0c\u91cd\u6784\u6b64\u524d\u7684\u7b14\u8bb0\u5185\u5bb9\uff1b</li> <li>\u9884\u8ba1\u66f4\u65b0\u4e00\u4e9b GPGPU \u76f8\u5173\u5185\u5bb9\u3002</li> </ul>"},{"location":"0_index/#2023-summer-2024-spring","title":"2023 Summer - 2024 Spring","text":"<ul> <li>\u6dfb\u52a0\u4e86\u4e00\u4e9b CMU 447 \u7684\u8bfe\u7a0b\u5185\u5bb9\uff0c\u4ee5\u53ca\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff1a\u91cf\u5316\u7814\u7a76\u65b9\u6cd5\u300b\uff08\u7b2c\u516d\u7248\uff09\u7684\u7b14\u8bb0\u3002</li> </ul>"},{"location":"0_index/#_2","title":"\u81f4\u8c22","text":"<p>\u611f\u8c22\u6240\u6709\u4e3a\u8be5\u6587\u6863\u63d0\u4f9b\u5e2e\u52a9\u7684\u670b\u53cb\u4eec\u4ee5\u53ca ChatGPT\uff01</p> <p> <ul> <li>Bwoah-Kimi: 640 lines (63.18%)</li> <li>Zhantong: 373 lines (36.82%)</li> </ul>"},{"location":"1_quantitative_principles/","title":"\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7684\u91cf\u5316\u539f\u7406","text":"<p>\u672c\u8282\u5185\u5bb9</p> <p>\u4e3b\u8981\u4ecb\u7ecd\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7684\u91cf\u5316\u539f\u7406\uff0c\u5305\u62ec Amdahl \u5b9a\u5f8b\u3001\u5904\u7406\u5668\u6027\u80fd\u516c\u5f0f\u7b49\u3002 \u5bf9\u5e94\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff1a\u91cf\u5316\u7814\u7a76\u65b9\u6cd5\u300b\u7684\u7b2c\u4e00\u7ae0</p>"},{"location":"1_quantitative_principles/#amdahl","title":"Amdahl \u5b9a\u5f8b","text":"<ul> <li>\u4f7f\u7528\u67d0\u79cd\u5feb\u901f\u6267\u884c\u6a21\u5f0f\u83b7\u5f97\u7684\u6027\u80fd\u6539\u8fdb\u53d7\u9650\u4e8e\u53ef\u4f7f\u7528\u8be5\u79cd\u6a21\u5f0f\u7684\u65f6\u95f4\u6bd4\u4f8b</li> <li>\u52a0\u901f\u6bd4 (Speedup) \u7684\u5b9a\u4e49\u4e3a\uff1a</li> </ul> \\text{\u52a0\u901f\u6bd4}=\\frac{\\text{\u6574\u4e2a\u4efb\u52a1\u5728\u91c7\u7528\u8be5\u9879\u6539\u8fdb\u65f6\u7684\u6027\u80fd}}{\\text{\u6574\u4e2a\u4efb\u52a1\u5728\u672a\u91c7\u7528\u8be5\u9879\u6539\u8fdb\u65f6\u7684\u6027\u80fd}} <p>\u52a0\u901f\u6bd4\u53d6\u51b3\u4e8e\uff1a</p> <ul> <li>\u539f\u8ba1\u7b97\u673a\u8ba1\u7b97\u65f6\u95f4\u4e2d\u53ef\u6539\u8fdb\u90e8\u5206\u6240\u5360\u7684\u6bd4\u4f8b\u2014\u2014\u6539\u8fdb\u6bd4\u4f8b</li> <li>\u901a\u8fc7\u6539\u8fdb\u6267\u884c\u6a21\u5f0f\u5f97\u5230\u7684\u6539\u8fdb\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u4e3a\u6574\u4e2a\u7a0b\u5e8f\u4f7f\u7528\u8fd9\u4e00\u6267\u884c\u6a21\u5f0f\u65f6\uff0c\u4efb\u52a1\u7684\u8fd0\u884c\u901f\u5ea6\u4f1a\u63d0\u9ad8\u591a\u5c11\u500d\u2014\u2014\u6539\u8fdb\u52a0\u901f\u6bd4</li> </ul> \\text{\u65b0\u6267\u884c\u65f6\u95f4}=\\text{\u539f\u6267\u884c\u65f6\u95f4}\\times ((1-\\text{\u6539\u8fdb\u6bd4\u4f8b})+\\frac{\\text{\u6539\u8fdb\u6bd4\u4f8b}}{\\text{\u6539\u8fdb\u52a0\u901f\u6bd4}}) \\text{\u603b\u52a0\u901f\u6bd4}=\\frac{\\text{\u539f\u6267\u884c\u65f6\u95f4}}{\\text{\u65b0\u6267\u884c\u65f6\u95f4}}=\\frac{1}{(1-\\text{\u6539\u8fdb\u6bd4\u4f8b})+\\frac{\\text{\u6539\u8fdb\u6bd4\u4f8b}}{\\text{\u6539\u8fdb\u52a0\u901f\u6bd4}}}"},{"location":"1_quantitative_principles/#_2","title":"\u5904\u7406\u5668\u6027\u80fd\u516c\u5f0f","text":"<ul> <li>\u65f6\u949f\u5468\u671f</li> <li>\u6307\u4ee4\u8def\u5f84\u957f\u5ea6\uff0c\u6216\u6307\u4ee4\u6570 (Instruction Count, IC)</li> <li>\u6bcf\u6761\u6307\u4ee4\u7684\u65f6\u949f\u5468\u671f\u6570 (Clock cycles per instruction, CPI)</li> </ul> CPI=\\frac{\\text{\u7a0b\u5e8f\u7684CPU\u65f6\u949f\u5468\u671f\u6570}}{\\text{\u6307\u4ee4\u6570}} CPU\u65f6\u95f4=\u6307\u4ee4\u6570\\times CPI\\times \u65f6\u949f\u5468\u671f\u65f6\u95f4 <ul> <li>\u5904\u7406\u5668\u7684\u6027\u80fd\u53d6\u51b3\u4e8e\u4e09\u4e2a\u7279\u6027\uff1a<ul> <li>\u65f6\u949f\u5468\u671f\uff1a\u786c\u4ef6\u6280\u672f\u4e0e\u7ec4\u6210</li> <li>\u6bcf\u6761\u6307\u4ee4\u7684\u65f6\u949f\u5468\u671f\u6570\uff1a\u7ec4\u6210\u4e0e\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784</li> <li>\u6307\u4ee4\u6570\uff1a\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\u4e0e\u7f16\u8bd1\u5668\u6280\u672f</li> </ul> </li> <li>\u8bbe\u8ba1\u5904\u7406\u5668\u65f6\uff0c\u6709\u65f6\u91c7\u7528\u5982\u4e0b\u516c\u5f0f\u8ba1\u7b97\u5904\u7406\u5668\u603b\u65f6\u949f\u5468\u671f\u6570\u76ee\uff1a</li> </ul> CPU\u65f6\u949f\u5468\u671f=\\Sigma^{n}_{i=1}IC_i\\times CPI_i <p>\u5176\u4e2d IC_i \u8868\u793a\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u7b2c i \u4e2a\u6307\u4ee4\u7684\u6267\u884c\u6b21\u6570\uff0cCPI_i \u8868\u793a\u7b2c i \u4e2a\u6307\u4ee4\u7684\u6bcf\u6761\u6307\u4ee4\u5e73\u5747\u65f6\u949f\u5468\u671f\u6570</p> CPI=\\frac{\\Sigma^{n}_{i=1}IC_i\\times CPI_i}{\u6307\u4ee4\u6570}=\\Sigma^{n}_{i=1}\\frac{IC_i}{\u6307\u4ee4\u6570}\\times CPI_i"},{"location":"2_introduction_to_computer_architecture/","title":"What is Computer Architecture?","text":"<p>\u672c\u8282\u5185\u5bb9</p> <p>\u672c\u8282\u4e3b\u8981\u662f CMU 447 \u7684 \u7b2c\u4e8c\u8bb2\u5185\u5bb9\u3002</p>"},{"location":"2_introduction_to_computer_architecture/#introduction-to-computer-architecture","title":"Introduction to Computer Architecture","text":""},{"location":"2_introduction_to_computer_architecture/#computer-architecture-in-levels-of-transformation","title":"Computer Architecture in Levels of Transformation","text":"<ul> <li>Problem</li> <li>Algorithm</li> <li>Program/Language</li> <li>Runtime System (VM, OS, MM)</li> <li>ISA</li> <li>Microarchitecture</li> <li>Logic</li> <li>Circuits</li> <li>Devices and Electrons</li> </ul>"},{"location":"2_introduction_to_computer_architecture/#what-is-an-algorithm","title":"What is an Algorithm?","text":"<p>An Algorithm is a step-by-step procedure for solving a problem in a finite amount of time. Each step has three properties:</p> <ul> <li>Definite (precisely defined)</li> <li>Effectively computable (by a computer)</li> <li>Terminates</li> </ul>"},{"location":"2_introduction_to_computer_architecture/#what-is-a-computer","title":"What is a Computer?","text":"<p>A Computer has three key components:</p> <ul> <li>computation: control and datapath</li> <li>communication: I/O</li> <li>storage</li> </ul> <p>The Von Neumann Model/Architecture of a computer has two key properties:</p> <ul> <li>Stored Program<ul> <li>instructions stored in a linear memory array</li> <li>memory is unified between instructions and data</li> </ul> </li> <li>Sequential instruction processing<ul> <li>one instruction processed at a time</li> <li>program counter identifies the current instruction</li> <li>program counter is advanced sequencially except for control transfer instructions</li> </ul> </li> </ul> <p>The Dataflow Model of a computer</p> <ul> <li>An instruction is fetched and executed in data flow order</li> <li>In a data flow machine, a program consists of data flow nodes. A data flow node fires when all its inputs are ready.</li> </ul>"},{"location":"2_introduction_to_computer_architecture/#what-is-computer-architecture_1","title":"What is Computer Architecture?","text":"<p>ISA + implementation definition: The science and art of designing, selecting, and interconnecting hardware components and designing the hardware/software interface to create a computing system that meets functional, performance, energy consumption, cost and other specific goals.</p> <p>Traditional (ISA-only) definition: The term architecture is used to describe the attributes of a system as seen by the programmer, i.e., the conceptual structure and functional behavior as distinct from the organization of the dataflow and controls, the logic design, and the physical implementation.</p> <p>ISA vs Microarchitecture</p> <ul> <li>Implementation (uarch) can be various as long as it satisfies the specification (ISA)</li> <li>Microarchitecture usually changes faster than ISA</li> </ul>"},{"location":"2_introduction_to_computer_architecture/#fundamentals-of-instruction-set-architecture-isa","title":"Fundamentals of Instruction Set Architecture (ISA)","text":""},{"location":"2_introduction_to_computer_architecture/#elements-of-an-isa","title":"Elements of an ISA","text":"<ul> <li>Instruction sequencing model<ul> <li>control flow vs. data flow</li> </ul> </li> <li>instruction processing style<ul> <li>specifies the number of \"operands\" an instruction \"operates\" on and how it does so</li> </ul> </li> <li>Instructions<ul> <li>Opcode</li> <li>Operand secifiers (Addressing modes)</li> </ul> </li> <li>Data types</li> <li>Memory organization<ul> <li>address space: how much uniquely identifiable locations in memory</li> <li>addressablility: how much data does each uniquely identifiable location store</li> </ul> </li> <li>Registers<ul> <li>Why registers? Because programs exhibit a characterstic called data locality</li> <li>General purpose registers (GPR)<ul> <li>all registers good for all purposes</li> </ul> </li> <li>Registers affect:<ul> <li>number of bits used for encoding register address</li> <li>number of values kept in fast storage (register file)</li> <li>(uarch) size, access time, power consumption of register file</li> </ul> </li> <li>Large number of registers:<ul> <li>enables better register allocation by compiler</li> <li>larger instruction size</li> <li>larger resiter file size</li> </ul> </li> </ul> </li> <li>Addressing modes</li> </ul>"},{"location":"2_introduction_to_computer_architecture/#different-types-of-computer-architecture","title":"Different Types of Computer Architecture","text":"<ul> <li>\u6808\u4f53\u7cfb\u7ed3\u6784<ul> <li>\u64cd\u4f5c\u6570\u4f4d\u4e8e\u6808\u7684\u9876\u90e8\uff08TOS\uff09</li> <li>0-address: op, push A, pop A</li> <li>Advantages<ul> <li>small instruction size: simple logic &amp; compact code</li> <li>efficient procedure calls: all parameters on stack</li> </ul> </li> <li>Disadvantage<ul> <li>computations that are not easily expressible with \"postfix notation\" are difficult to map to stack machines</li> <li>not flexible</li> </ul> </li> </ul> </li> <li>\u7d2f\u52a0\u5668\u4f53\u7cfb\u7ed3\u6784<ul> <li>\u64cd\u4f5c\u6570\u4e3a\u9690\u5f0f\u7684\u7d2f\u52a0\u5668</li> <li>1-address: op ACC, ld A, st A</li> </ul> </li> <li>\u901a\u7528\u5bc4\u5b58\u5668\u4f53\u7cfb\u7ed3\u6784<ul> <li>\u53ea\u6709\u663e\u5f0f\u64cd\u4f5c\u6570\uff1a\u5bc4\u5b58\u5668\u6216\u5b58\u50a8\u5730\u5740</li> <li>\u4e24\u7c7b\u4e0d\u540c\u7684\u5bc4\u5b58\u5668\u8ba1\u7b97\u673a\uff1a<ul> <li>\u5bc4\u5b58\u5668-\u5b58\u50a8\u5668 \u4f53\u7cfb\u7ed3\u6784\uff1a\u53ef\u4ee5\u7528\u4efb\u610f\u6307\u4ee4\u6765\u8bbf\u95ee\u5b58\u50a8\u5668</li> <li>\u8f7d\u5165-\u5b58\u50a8 \u4f53\u7cfb\u7ed3\u6784\uff1a\u53ea\u80fd\u7528\u8f7d\u5165\u548c\u5b58\u50a8\u6307\u4ee4\u6765\u8bbf\u95ee\u5b58\u50a8\u5668</li> </ul> </li> </ul> </li> </ul>"},{"location":"2_introduction_to_computer_architecture/#different-types-of-addressing-modes","title":"Different Types of Addressing Modes","text":"<p>Addressing modes specifies how to obtain the operands from the registers/memory.</p> <ul> <li>\u5bc4\u5b58\u5668\u5bfb\u5740<ul> <li>\u503c\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d</li> </ul> </li> <li>\u7acb\u5373\u6570\u5bfb\u5740 (absolute)<ul> <li>use immediate value as address</li> </ul> </li> <li>\u5bc4\u5b58\u5668\u95f4\u63a5\u5bfb\u5740 (register indirect)<ul> <li>use GPR[{r}_{base}] as address</li> </ul> </li> <li>\u4f4d\u79fb\u91cf\u5bfb\u5740 (displaced or based)<ul> <li>use offset + GPR[{r}_{base}] as address</li> </ul> </li> <li>\u7d22\u5f15\u5bfb\u5740 (indexed)<ul> <li>use GPR[{r}_{base}] + GPR[{r}_{index}] as address</li> </ul> </li> <li>\u5b58\u50a8\u5668\u95f4\u63a5\u5bfb\u5740 (memory indirect)<ul> <li>use value at M[GPR[r_{base}]] as address</li> </ul> </li> <li>\u81ea\u52a8\u9012\u589e\u5bfb\u5740 (auto increment)<ul> <li>use GPR[r_{base}] as address, but inc. GPR[r_{base}] each time</li> </ul> </li> <li>\u81ea\u52a8\u9012\u51cf\u5bfb\u5740 (auto decrement)</li> <li>\u6bd4\u4f8b\u5bfb\u5740<ul> <li>\u7528\u4e8e\u7d22\u5f15\u6570\u7ec4</li> </ul> </li> </ul> <p>Advantages of more addressing modes</p> <ul> <li>enables better mapping of high-level constructs to the machine</li> </ul> <p>Disadvantages of more addressing modes</p> <ul> <li>higher complexity of the architecture</li> <li>higher CPI</li> <li>more work for the complier</li> <li>more work for the microarchitect</li> </ul>"},{"location":"2_introduction_to_computer_architecture/#different-types-of-operations-in-an-isa","title":"Different Types of Operations in an ISA","text":"<ul> <li>\u7b97\u6570\u4e0e\u903b\u8f91\uff1a\u52a0\u51cf\u4e58\u9664\uff0c\u4e0e\u6216\uff0cetc.</li> <li>\u6570\u636e\u4f20\u9001\uff1a\u8f7d\u5165-\u5b58\u50a8</li> <li>\u63a7\u5236<ul> <li>\u8df3\u8f6c\uff1a\u63a7\u5236\u4e2d\u7684\u6539\u53d8\u662f \u65e0\u6761\u4ef6 \u7684</li> <li>\u5206\u652f\uff1a\u63a7\u5236\u4e2d\u7684\u6539\u53d8\u662f \u6709\u6761\u4ef6 \u7684</li> <li>\u8fc7\u7a0b\u8c03\u7528\u4e0e\u8fd4\u56de</li> </ul> </li> <li>\u7cfb\u7edf\uff1a\u64cd\u4f5c\u7cfb\u7edf\u8c03\u7528\u3001\u865a\u62df\u5185\u5b58\u7ba1\u7406\u6307\u4ee4</li> <li>\u6d6e\u70b9</li> <li>\u5341\u8fdb\u5236\uff1a\u5341\u8fdb\u5236\u52a0\u6cd5\u4e0e\u4e58\u6cd5\u3001\u4e8c\u8fdb\u5236\u5230\u5b57\u7b26\u7684\u8f6c\u6362</li> <li>\u5b57\u7b26\u4e32\uff1a\u79fb\u52a8\u3001\u6bd4\u8f83\u3001\u641c\u7d22</li> <li>\u56fe\u5f62\uff1a\u50cf\u7d20\u4e0e\u9876\u70b9\u64cd\u4f5c\u3001\u538b\u7f29/\u89e3\u538b\u7f29\u64cd\u4f5c</li> </ul>"},{"location":"2_introduction_to_computer_architecture/#encoding-of-an-isa","title":"Encoding of an ISA","text":"<p>ISA \u6240\u652f\u6301\u7684\u5404\u79cd\u64cd\u4f5c\u901a\u5e38\u5728\u4e00\u4e2a\u79f0\u4e3a\u64cd\u4f5c\u7801 (Opcode) \u7684\u5b57\u6bb5\u4e2d\u6307\u5b9a\u3002\u6307\u4ee4\u96c6\u7f16\u7801\u5c06\u5bfb\u5740\u65b9\u5f0f\u4e0e\u64cd\u4f5c\u7ed3\u5408\u5728\u4e00\u8d77</p> <ul> <li>\u5730\u5740\u6807\u8bc6\u7b26\uff1a\u8bf4\u660e\u4f7f\u7528\u54ea\u79cd\u5bfb\u5740\u65b9\u5f0f\u6765\u8bbf\u95ee\u64cd\u4f5c\u6570</li> <li>\u5b9a\u957f\u7f16\u7801 (Fixed length)\uff1a\u6240\u6709\u6307\u4ee4\u7684\u5927\u5c0f\u90fd\u76f8\u540c<ul> <li>\u5f53\u5bfb\u5740\u65b9\u5f0f\u548c\u64cd\u4f5c\u6570\u90fd\u8f83\u5c11\u65f6\uff0c\u6548\u679c\u6700\u597d</li> <li>Pros:<ul> <li>easier to decode single instruction in hardware -&gt; simpler hardware design</li> <li>easier to decode multiple instructions concurrently</li> </ul> </li> <li>Cons:<ul> <li>wasted bits in instructions -&gt; higher energy consumption retrieving operands</li> <li>harder-to-extend ISA</li> </ul> </li> </ul> </li> <li>\u53d8\u957f\u7f16\u7801 (Variable length)<ul> <li>\u51e0\u4e4e\u5141\u8bb8\u5bf9\u6240\u6709\u64cd\u4f5c\u4f7f\u7528\u6240\u6709\u7684\u53d6\u5740\u65b9\u5f0f</li> <li>\u5728\u5b58\u5728\u8bb8\u591a\u5bfb\u5740\u65b9\u5f0f\u548c\u64cd\u4f5c\u65f6\uff0c\u662f\u6700\u7edd\u4f73\u9009\u62e9</li> <li>Enables Uniform Decode (usually goes with fixed length)<ul> <li>same bits in each instruction correspond to the same meaning</li> <li>easier decode, simpler hardware</li> <li>enables parallelism: generate target address before knowing the instruction is a branch</li> <li>restrcits instruction format -&gt; less flexibility</li> </ul> </li> <li>Pros<ul> <li>compact encoding, e.g. Intel 432: Huffman encoding</li> </ul> </li> <li>Cons<ul> <li>more logic to decode a single instruction</li> <li>harder to decode multiple instructions concurrently</li> </ul> </li> </ul> </li> <li>Tradeoffs<ul> <li>code size vs. hardware complexity</li> <li>ISA extensibility and expressiveness vs. hardware complexity</li> <li>smaller code vs. ease of decode</li> </ul> </li> <li>Uniform Decode<ul> <li>same bits in each instruction correspond to the same meaning</li> </ul> </li> </ul>"},{"location":"3_memory_hierarchy/","title":"Memory Hierarchy","text":"<p>\u672c\u8282\u5185\u5bb9</p> <p>\u672c\u8282\u5185\u5bb9\u4e3b\u8981\u6765\u81ea\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff1a\u91cf\u5316\u7814\u7a76\u65b9\u6cd5\u300b\u7b2c\u4e8c\u7ae0\uff1a\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u8bbe\u8ba1\u3002</p>"},{"location":"3_memory_hierarchy/#_1","title":"\u5904\u7406\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u7f13\u5b58","text":"<p>\u7f13\u5b58\u662f\u6307\u5730\u5740\u79bb\u5f00\u5904\u7406\u5668\u540e\u9047\u5230\u7684\u6700\u9ad8\u7ea7\u6216\u7b2c\u4e00\u7ea7\u7684\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784</p> <p>\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e2d\u5fc3\u601d\u60f3 \u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e2a k\uff0c\u4f4d\u4e8e k \u5c42\u7684\u66f4\u5feb\u3001\u66f4\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u4f5c\u4e3a\u4f4d\u4e8e k+1 \u5c42\u7684\u66f4\u6162\u3001\u66f4\u5927\u7684\u5b58\u50a8\u8bbe\u5907\u7684\u7f13\u5b58\u3002 \u5373\uff0c\u5b58\u50a8\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e00\u5c42\u7f13\u5b58\u90fd\u6765\u81ea\u8f83\u4f4e\u4e00\u5c42\u7684\u6570\u636e\u5bf9\u8c61\u3002</p> <ul> <li>\u7b2c k+1 \u5c42\u7684\u5b58\u50a8\u5668\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u6570\u636e\u5bf9\u8c61\u5757\uff0c\u79f0\u4e3a \u5757 \uff0c\u6bcf\u4e2a\u5757\u90fd\u6709\u552f\u4e00\u7684\u5730\u5740\u6216\u540d\u5b57\u3002</li> <li>\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u7b2c k \u5c42\u7684\u7f13\u5b58\u90fd\u5305\u542b\u7b2c k+1 \u5c42\u5757\u7684\u4e00\u4e2a\u5b50\u96c6\u7684\u526f\u672c\u3002</li> <li>\u6570\u636e\u603b\u662f\u4ee5\u5757\u5927\u5c0f\u4e3a\u4f20\u9001\u5355\u5143\u5728 k \u548c k+1 \u5c42\u4e4b\u95f4\u6765\u56de\u590d\u5236</li> </ul> <p>\u7f13\u5b58\u547d\u4e2d (Cache hit) \uff1a\u5904\u7406\u5668\u5728\u7f13\u5b58\u4e2d\u627e\u5230\u4e86\u6240\u8bf7\u6c42\u7684\u6570\u636e\u9879</p> <p>\u7f13\u5b58\u7f3a\u5931 (Cache miss) \uff1a\u5904\u7406\u5668\u6ca1\u6709\u5728\u7f13\u5b58\u4e2d\u627e\u5230\u6240\u8bf7\u6c42\u7684\u6570\u636e\u9879</p> <ul> <li>\u7f13\u5b58\u7f3a\u5931\u9700\u8981\u7684\u65f6\u95f4\u53d6\u51b3\u4e8e\u5b58\u50a8\u5668\u7684\u5ef6\u8fdf\u548c\u5e26\u5bbd<ul> <li>\u5ef6\u8fdf\u51b3\u5b9a\u63d0\u53d6\u5757\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7684\u65f6\u95f4</li> <li>\u5e26\u5bbd\u51b3\u5b9a\u63d0\u53d6\u8fd9\u4e2a\u5757\u4e2d\u5176\u4ed6\u6570\u636e\u7684\u65f6\u95f4</li> </ul> </li> <li>\u8986\u76d6\u4e00\u4e2a\u73b0\u6210\u7684\u5757\u79f0\u4e3a \u66ff\u6362/\u9a71\u9010 \u8fd9\u4e2a\u5757</li> <li>\u51b3\u5b9a\u66ff\u6362\u54ea\u4e00\u4e2a\u5757\u53d6\u51b3\u4e8e\u7f13\u5b58\u7684 \u66ff\u6362\u7b56\u7565 (Replacement policy)<ul> <li>\u968f\u673a\u66ff\u6362\u7b56\u7565</li> <li>\u6700\u8fd1\u6700\u5c11\u88ab\u4f7f\u7528 (LRU) \u66ff\u6362\u7b56\u7565</li> </ul> </li> </ul> <p>\u7f13\u5b58\u7f3a\u5931\u7684\u79cd\u7c7b \u5305\u62ec\uff1a</p> <ul> <li>\u5f3a\u5236\u6027\u4e0d\u547d\u4e2d (Compulsory miss) / \u51b7\u4e0d\u547d\u4e2d (Cold miss)<ul> <li>\u4e00\u4e2a\u7a7a\u7684\u7f13\u5b58\u79f0\u4e3a\u51b7\u7f13\u5b58 (Cold miss)\uff0c\u8bbf\u95ee\u8be5\u7f13\u5b58\u4f1a\u9020\u6210\u7f13\u5b58\u4e0d\u547d\u4e2d</li> </ul> </li> <li>\u51b2\u7a81\u4e0d\u547d\u4e2d (Conflict miss)<ul> <li>\u786c\u4ef6\u7f13\u5b58\u91c7\u7528\u7684\u4e00\u79cd\u653e\u7f6e\u7b56\u7565 (Placement policy)\uff1a\u5c06 k+1 \u5c42\u7684\u67d0\u4e00\u4e2a\u5757\u9650\u5236\u653e\u7f6e\u5728 k \u5c42\u7684\u4e00\u4e2a\u5c0f\u7684\u5b50\u96c6\u4e2d</li> <li>\u53ef\u80fd\u5bfc\u81f4\u8fde\u7eed\u8bbf\u95ee\u7684\u4e24\u4e2a\u5757\u88ab\u9650\u5236\u5728 k \u5c42\u7684\u540c\u4e00\u4e2a\u533a\u57df\u4e2d\uff0c\u65e0\u6cd5\u8fde\u7eed\u547d\u4e2d</li> </ul> </li> <li>\u5bb9\u91cf\u4e0d\u547d\u4e2d (Capacity miss)<ul> <li>\u7a0b\u5e8f\u6bcf\u4e2a\u9636\u6bb5\u8bbf\u95ee\u7f13\u5b58\u5757\u4e2d\u67d0\u4e2a\u76f8\u5bf9\u7a33\u5b9a\u4e0d\u53d8\u7684\u96c6\u5408\uff08\u5de5\u4f5c\u96c6\uff09</li> <li>\u5f53\u5de5\u4f5c\u96c6\u7684\u5927\u5c0f\u8d85\u8fc7\u7f13\u5b58\u7684\u5927\u5c0f\u65f6\uff0c\u7f13\u5b58\u7ecf\u5386\u5bb9\u91cf\u4e0d\u547d\u4e2d</li> </ul> </li> </ul>"},{"location":"3_memory_hierarchy/#_2","title":"\u7f13\u5b58\u6027\u80fd","text":"<ul> <li>\u5b58\u50a8\u5668\u505c\u987f\u5468\u671f\uff1a\u7531\u4e8e\u7b49\u5f85\u5b58\u50a8\u5668\u8bbf\u95ee\u9020\u6210\u7684\u505c\u987f\u5468\u671f\u6570</li> <li>CPU\u6267\u884c\u65f6\u95f4=(CPU\u65f6\u949f\u5468\u671f\u6570+\u5b58\u50a8\u5668\u505c\u987f\u5468\u671f\u6570)\\times \u65f6\u949f\u5468\u671f\u65f6\u95f4</li> <li>\u7f3a\u5931\u4ee3\u4ef7\uff1a\u6bcf\u6b21\u7f3a\u5931\u7684\u6210\u672c<ul> <li>\u5b58\u50a8\u5668\u505c\u987f\u5468\u671f=\u7f3a\u5931\u6570\\times\u7f3a\u5931\u4ee3\u4ef7=IC\\times\\frac{\u5b58\u50a8\u5668\u8bbf\u95ee\u6b21\u6570}{\u6307\u4ee4}\\times\u7f3a\u5931\u7387\\times \u7f3a\u5931\u4ee3\u4ef7</li> <li>\u7f3a\u5931\u7387 (Miss Rate)\uff1a\u5bfc\u81f4\u7f3a\u5931\u7684\u8bbf\u95ee\u9664\u4ee5\u603b\u8bbf\u95ee\u6570\uff0c\u662f \u7f13\u5b58\u8bbe\u8ba1\u4e2d\u6700\u91cd\u8981\u7684\u5ea6\u91cf\u4e4b\u4e00</li> </ul> </li> <li>\u6bcf\u6761\u6307\u4ee4\u7684\u7f3a\u5931\u6570<ul> <li>\\frac{\u7f3a\u5931\u6570}{\u6307\u4ee4}=\u7f3a\u5931\u7387\\times \\frac{\u5b58\u50a8\u5668\u8bbf\u95ee\u6b21\u6570}{\u6307\u4ee4}</li> </ul> </li> </ul>"},{"location":"3_memory_hierarchy/#_3","title":"\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668","text":""},{"location":"3_memory_hierarchy/#_4","title":"\u901a\u7528\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\u7ec4\u7ec7\u7ed3\u6784","text":"<ul> <li>\u6bcf\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u6709 m \u4f4d\uff0c\u5f62\u6210 M=2^m \u4e2a\u4e0d\u540c\u7684\u5730\u5740</li> <li>\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a\u6709 S=2^s \u4e2a \u9ad8\u901f\u7f13\u5b58\u7ec4 \u7684\u6570\u7ec4</li> <li>\u6bcf\u4e2a\u7ec4\u5305\u542b E \u4e2a \u9ad8\u901f\u7f13\u5b58\u884c</li> <li>\u6bcf\u4e00\u884c\u7531\uff1a<ul> <li>\u4e00\u4e2a B=2^b \u5b57\u8282\u7684 \u6570\u636e\u5757</li> <li>\u4e00\u4e2a \u6709\u6548\u4f4d(Valid bit) \u6307\u660e\u8be5\u884c\u662f\u5426\u6709\u6709\u610f\u4e49\u7684\u4fe1\u606f</li> <li>t=m-b-s \u4e2a \u6807\u8bb0\u4f4d \uff1a\u552f\u4e00\u5730\u6807\u8bc6\u5b58\u50a8\u5728\u8fd9\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u7684\u5757</li> </ul> </li> <li>\u9ad8\u901f\u7f13\u5b58\u7684\u7ed3\u6784\u53ef\u4ee5\u7531\u5143\u7ec4 (S, E, B, m) \u6765\u63cf\u8ff0</li> <li>\u9ad8\u901f\u7f13\u5b58\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff1a C=S\\times E\\times B</li> <li>\u53c2\u6570 S \u548c B \u5c06 m \u4e2a\u5730\u5740\u4f4d\u5206\u4e3a\u4e09\u4e2a\u5b57\u6bb5<ul> <li>s \u4e2a\u7ec4\u7d22\u5f15\u4f4d\uff1a\u88ab\u89e3\u91ca\u4e3a\u4e00\u4e2a\u65e0\u7b26\u53f7\u6570\uff0c\u544a\u8bc9\u6211\u4eec\u8fd9\u4e2a\u5b57\u5fc5\u987b\u5b58\u50a8\u5728\u54ea\u4e2a\u7ec4\u4e2d</li> <li>t \u4e2a\u6807\u8bb0\u4f4d\uff1a\u544a\u8bc9\u6211\u4eec\u8fd9\u4e2a\u7ec4\u4e2d\u7684\u54ea\u4e00\u884c\u5305\u542b\u8fd9\u4e2a\u5b57</li> <li>b \u4e2a\u5757\u504f\u79fb\u4f4d\uff1a\u7ed9\u51fa\u5728 B \u4e2a\u5b57\u8282\u7684\u6570\u636e\u5757\u4e2d\u7684\u5b57\u504f\u79fb</li> </ul> </li> </ul> Cache Structure"},{"location":"3_memory_hierarchy/#_5","title":"\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58","text":"<p>\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c\u7684\u9ad8\u901f\u7f13\u5b58\u88ab\u79f0\u4e3a \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58 (Direct-mapped Cache)\uff0c\u5373 E=1</p> Direct-mapped Caches <p>\u9ad8\u901f\u7f13\u5b58\u786e\u5b9a\u4e00\u4e2a\u8bf7\u6c42 w \u662f\u5426\u547d\u4e2d\uff0c\u7136\u540e\u62bd\u53d6\u51fa\u88ab\u8bf7\u6c42\u7684\u5b57\u7684\u8fc7\u7a0b\u5206\u4e3a\u4e09\u90e8\u5206\u3002</p> <ol> <li>\u7ec4\u9009\u62e9 \uff1a\u4ece\u5730\u5740\u4e2d\u63d0\u53d6\u7ec4\u7d22\u5f15\u4f4d\u3002\u8fd9\u4e9b\u4f4d\u88ab\u89e3\u91ca\u6210\u4e00\u4e2a\u5bf9\u5e94\u4e8e\u7ec4\u53f7\u7684\u65e0\u7b26\u53f7\u6574\u6570\u3002</li> </ol> Set Select of Direct-mapped Caches <ol> <li>\u884c\u5339\u914d \uff1a\u9ad8\u901f\u7f13\u5b58\u7684 \u6709\u6548\u4f4d \u8bbe\u7f6e\u4e86\uff0c\u800c\u4e14 \u9ad8\u901f\u7f13\u5b58\u7684 \u6807\u8bb0\u4f4d \u4e0e w \u7684\u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u65f6\uff0c\u8fd9\u4e00\u884c\u5305\u542b\u4e86 w \u7684\u4e00\u4e2a\u526f\u672c\u3002</li> </ol> Row Select of Direct-mapped Caches <ol> <li>\u5b57\u9009\u62e9 \uff1a\u4e00\u65e6\u547d\u4e2d\uff0c\u6211\u4eec\u77e5\u9053w\u5c31\u5728\u8fd9\u4e2a\u5757\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u6700\u540e\u4e00\u6b65\u786e\u5b9a\u6240\u9700\u8981\u7684\u5b57\u518d\u5757\u4e2d\u662f\u4ece\u54ea\u91cc\u5f00\u59cb\u7684\u3002 \u5757\u504f\u79fb\u4f4d \u63d0\u4f9b\u4e86\u6240\u9700\u8981\u7684\u5b57\u4ece\u54ea\u91cc\u5f00\u59cb\u3002</li> </ol> <p>\u5982\u679c\u7f13\u5b58\u4e0d\u547d\u4e2d\uff0c\u90a3\u4e48\u5b83\u9009\u54df\u4ece\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e0b\u4e00\u5c42\u53d6\u51fa\u88ab\u8bf7\u6c42\u7684\u5757\uff0c\u7136\u540e\u628a\u65b0\u7684\u5757\u5b58\u50a8\u5728\u65cf\u6240\u56e0\u4e3a\u6307\u793a\u7684\u7ec4\u4e2d\u7684\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5982\u679c\u7ec4\u4e2d\u90fd\u662f\u6709\u6548\u7684\u9ad8\u901f\u7f13\u5b58\u884c\uff0c\u90a3\u4e48\u5fc5\u987b\u9a71\u9010\u51fa\u4e00\u4e2a\u73b0\u5b58\u7684\u884c\u3002\u5bf9\u4e8e\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\uff0c\u9a71\u9010\u7b56\u7565\u662f\u7b80\u5355\u7684\uff1a \u9a71\u9010\u7ec4\u4e2d\u7684\u552f\u4e00\u4e00\u884c\u3002</p> <p>\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u5e38\u4f1a\u53d1\u751f\u51b2\u7a81\u4e0d\u547d\u4e2d</p> <ul> <li>\u6296\u52a8 (thrash)\uff1a\u9ad8\u901f\u7f13\u5b58\u53cd\u590d\u5730\u52a0\u8f7d\u548c\u53bb\u9664\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u5757\u7684\u7ec4</li> <li>\u89e3\u51b3\u65b9\u6cd5\uff1a\u5728\u6bcf\u4e2a\u6570\u7ec4\u7684\u7ed3\u5c3e\u653eB\u5b57\u8282\u7684\u586b\u5145</li> </ul>"},{"location":"3_memory_hierarchy/#_6","title":"\u7ec4\u76f8\u8fde\u6620\u5c04\u9ad8\u901f\u7f13\u5b58","text":"<p>\u6bcf\u4e2a\u7ec4\u4fdd\u5b58\u591a\u4e8e\u4e00\u4e2a\u7684\u9ad8\u901f\u7f13\u51b2\u884c\u79f0\u4e3a \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 (Set Associative Cache)\uff0c\u5373 1&lt;E&lt;\\frac{C}{B}</p> <p> Set Associative Caches <ol> <li>\u7ec4\u9009\u62e9 \uff1a\u4ece\u5730\u5740\u4e2d\u63d0\u53d6\u7ec4\u7d22\u5f15\u4f4d\u3002\u8fd9\u4e00\u64cd\u4f5c\u4e0e\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u64cd\u4f5c\u76f8\u540c\u3002</li> <li>\u884c\u5339\u914d \uff1a\u5fc5\u987b\u68c0\u67e5\u540c\u4e00\u4e2a\u7ec4\u4e2d\u591a\u4e2a\u884c\u7684\u6807\u8bb0\u4f4d\u4e8e\u6709\u6548\u4f4d\uff0c\u4ee5\u786e\u5b9a\u6240\u8bf7\u6c42\u7684\u5b57\u662f\u5426\u5728\u96c6\u5408\u4e2d\u3002\u9ad8\u901f\u7f13\u5b58\u641c\u7d22\u7ec4\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u5bfb\u627e\u4e00\u4e2a\u6709\u6548\u7684\u884c\uff0c\u5176\u6807\u8bb0\u4e0e\u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u3002</li> <li>\u5b57\u9009\u62e9 \uff1a\u4e00\u65e6\u547d\u4e2d\uff0c\u6211\u4eec\u77e5\u9053 w \u5c31\u5728\u8fd9\u4e2a\u5757\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u6700\u540e\u4e00\u6b65\u786e\u5b9a\u6240\u9700\u8981\u7684\u5b57\u518d\u5757\u4e2d\u662f\u4ece\u54ea\u91cc\u5f00\u59cb\u7684\u3002 \u5757\u504f\u79fb\u4f4d \u63d0\u4f9b\u4e86\u6240\u9700\u8981\u7684\u5b57\u4ece\u54ea\u91cc\u5f00\u59cb\u3002</li> </ol> Row Select of Set Associative Caches <p>\u5982\u679c CPU \u8bf7\u6c42\u7684\u5b57\u4e0d\u5728\u7ec4\u4e2d\u7684\u4efb\u4f55\u4e00\u884c\uff0c\u90a3\u4e48\u5c31\u662f\u7f13\u5b58\u4e0d\u547d\u4e2d\u3002\u9ad8\u901f\u7f13\u5b58\u5fc5\u987b\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u5305\u542b\u8fd9\u4e2a\u5b57\u7684\u5757\u3002 \u5982\u679c\u8be5\u7ec4\u4e2d\u6ca1\u6709\u7a7a\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u4ece\u4e2d\u9009\u62e9\u4e00\u4e2a\u975e\u7a7a\u7684\u884c\u8fdb\u884c\u66ff\u6362\u3002 \u66ff\u6362\u7b56\u7565 \u5305\u62ec\uff1a</p> <ul> <li>\u6700\u4e0d\u5e38\u4f7f\u7528 (Least-Frequently-Used, LFU) \u7b56\u7565\uff1a\u66ff\u6362\u5728\u8fc7\u53bb\u67d0\u4e2a\u65f6\u95f4\u7a97\u53e3\u5185\u5f15\u7528\u6b21\u6570\u6700\u5c11\u7684\u90a3\u4e00\u884c</li> <li>\u6700\u8fd1\u6700\u5c11\u4f7f\u7528 (Least-Recently-Used, LRU) \u7b56\u7565\uff1a\u66ff\u6362\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4\u6700\u4e45\u8fdc\u7684\u90a3\u4e00\u884c</li> </ul>"},{"location":"3_memory_hierarchy/#_7","title":"\u5168\u76f8\u8fde\u6620\u5c04\u9ad8\u901f\u7f13\u5b58","text":"<p>\u5168\u76f8\u8fde\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u7ec4\u9009\u62e9\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7ec4\u3002\u5730\u5740\u4e2d \u6ca1\u6709\u7ec4\u7d22\u5f15\u4f4d \uff0c\u5730\u5740\u53ea\u88ab\u5212\u5206\u4e3a\u4e00\u4e2a\u6807\u8bb0\u548c\u4e00\u4e2a\u5757\u504f\u79fb\u3002</p> Fully Associative Caches <p>\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u884c\u5339\u914d\u548c\u5b57\u9009\u62e9\u4e0e\u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u4e2d\u662f\u4e00\u6837\u7684\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u533a\u522b\u4e3b\u8981\u662f\u89c4\u6a21\u5927\u5c0f\u7684\u95ee\u9898\u3002</p> <p>\u56e0\u4e3a\u9ad8\u901f\u7f13\u5b58\u7535\u8def\u5fc5\u987b\u5e76\u884c\u5730\u641c\u7d22\u8bb8\u591a\u76f8\u5339\u914d\u7684\u6807\u8bb0\uff0c\u6784\u9020\u4e00\u4e2a\u53c8\u5927\u53c8\u5feb\u7684\u76f8\u8fde\u9ad8\u901f\u7f13\u5b58\u5f88\u56f0\u96be\uff0c\u800c\u4e14\u5f88\u6602\u8d35\u3002 \u56e0\u6b64\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u53ea\u9002\u5408\u505a\u5c0f\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u4f8b\u5982\u865a\u62df\u5185\u5b58\u7cfb\u7edf\u4e2d\u7684\u7ffb\u8bd1\u5907\u7528\u7f13\u51b2\u5668 (TLB)\uff0c\u5b83\u7f13\u5b58\u9875\u8868\u9879\u3002</p>"},{"location":"3_memory_hierarchy/#_8","title":"\u5982\u4f55\u5199\u5165\u7f13\u5b58","text":"<p>\u5047\u8bbe\u8981\u5199\u4e00\u4e2a\u5df2\u7ecf\u7f13\u5b58\u7684\u5b57 W:</p> <p>\u5199\u547d\u4e2d (Write hit)\uff0c\u9700\u8981\u66f4\u65b0 W \u5728\u5c42\u6b21\u7ed3\u6784\u4e2d\u7d27\u63a5\u7740\u4f4e\u4e00\u5c42\u4e2d\u7684\u526f\u672c</p> <ul> <li>\u76f4\u5199 (Write-through)\uff1a\u7acb\u5373\u5c06 W \u7684\u9ad8\u901f\u7f13\u5b58\u5757\u5199\u56de\u4f4e\u4e00\u5c42\u4e2d<ul> <li>\u66f4\u5bb9\u6613\u5b9e\u73b0\uff0c\u7b80\u5316\u6570\u636e\u4e00\u81f4\u6027</li> <li>\u6bcf\u6b21\u5199\u90fd\u4f1a\u5f15\u8d77\u603b\u7ebf\u6d41\u91cf</li> <li>\u5982\u679c\u5904\u7406\u5668\u5728\u76f4\u5199\u671f\u95f4\u5fc5\u987b\u7b49\u5f85\u5199\u64cd\u4f5c\u5b8c\u6210\uff0c\u5219\u79f0\u5904\u7406\u5668\u5904\u4e8e \u5199\u5165\u505c\u987f \u72b6\u6001</li> <li>\u51cf\u5c0f\u5199\u5165\u505c\u987f\u7684\u65b9\u6848\uff1a \u589e\u52a0\u4e00\u4e2a \u5199\u7f13\u51b2\u533a \uff1a\u6570\u636e\u88ab\u5199\u5165\u7f13\u51b2\u533a\u540e\uff0c\u5904\u7406\u5668\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c<ul> <li>\u5199\u7f13\u51b2\u533a\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a FIFO \u961f\u5217</li> <li>\u5f53\u5b58\u50a8\u9891\u7387\u63a5\u8fd1\u4e8e DRAM \u7684\u5199\u5165\u901f\u5ea6\u65f6\uff08\u5047\u8bbe\u9ad8\u901f\u7f13\u5b58\u7684\u4f4e\u5c42\u5b58\u50a8\u662f\u4e3b\u5b58\uff09\uff0c\u5199\u7f13\u51b2\u533a\u53ef\u80fd\u4f1a\u53d1\u751f\u9971\u548c</li> </ul> </li> </ul> </li> <li>\u5199\u56de (Write back)\uff1a\u5f53\u66ff\u6362\u7b97\u6cd5\u8981\u9a71\u9010\u8fd9\u4e2a\u5757\u65f6\uff0c\u624d\u628a\u5b83\u5199\u56de\u4f4e\u4e00\u5c42\u4e2d<ul> <li>\u7531\u4e8e\u5c40\u90e8\u6027\uff0c\u80fd\u591f\u663e\u8457\u51cf\u5c0f\u603b\u7ebf\u6d41\u91cf\uff0c\u5bf9\u591a\u5904\u7406\u5668\u66f4\u5177\u6709\u5438\u5f15\u529b</li> <li>\u589e\u52a0\u590d\u6742\u6027\uff0c\u9ad8\u901f\u7f13\u5b58\u9700\u8981\u4e3a\u6bcf\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u7ef4\u62a4\u4e00\u4e2a\u989d\u5916\u7684 \u4fee\u6539\u4f4d (Dirty bit) \uff0c\u8868\u660e\u8fd9\u4e2a\u544a\u8bc9\u7f13\u5b58\u5757\u662f\u5426\u88ab\u4fee\u6539\u8fc7\u3002</li> </ul> </li> </ul> <p>\u82e5\u53d1\u751f\u5199\u4e0d\u547d\u4e2d (Write miss)</p> <ul> <li>\u5199\u5206\u914d (Write-allocate)\uff1a\u52a0\u8f7d\u76f8\u5e94\u7684\u7b2c\u4e00\u5c42\u4e2d\u7684\u5757\u5230\u9ad8\u901f\u7f13\u5b58\u4e2d\uff0c\u7136\u540e\u66f4\u65b0\u8fd9\u4e2a\u9ad8\u901f\u7f13\u5b58\u5757<ul> <li>\u6bcf\u6b21\u4e0d\u547d\u4e2d\u90fd\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u5757\u4ece\u4f4e\u4e00\u5c42\u4f20\u5230\u9ad8\u901f\u7f13\u5b58</li> </ul> </li> <li>\u975e\u5199\u5206\u914d (Not-write-allocate)\uff1a\u907f\u5f00\u9ad8\u901f\u7f13\u5b58\uff0c\u76f4\u63a5\u5c06\u8fd9\u4e2a\u5b57\u5199\u5230\u4f4e\u4e00\u5c42</li> </ul> <p>\u76f4\u5199\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u662f\u975e\u5199\u5206\u914d\uff0c \u800c \u5199\u56de\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u662f\u5199\u5206\u914d</p>"},{"location":"3_memory_hierarchy/#_9","title":"\u4e00\u4e2a\u771f\u5b9e\u7684\u9ad8\u901f\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u7684\u5256\u6790","text":"<ul> <li>i-cache\uff1a\u53ea\u4fdd\u5b58\u6307\u4ee4\u7684\u9ad8\u901f\u7f13\u5b58</li> <li>d-cache\uff1a\u53ea\u4fdd\u5b58\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58</li> <li>unified cache\uff1a\u65e2\u4fdd\u5b58\u6307\u4ee4\u53c8\u4fdd\u5b58\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58</li> <li>\u73b0\u4ee3\u5904\u7406\u5668\u6709\u72ec\u7acb\u7684 i-cache &amp; d-cache<ul> <li>\u5904\u7406\u5668\u80fd\u591f\u540c\u65f6\u8bfb\u6307\u4ee4\u4e0e\u6570\u636e</li> <li>i-cache \u901a\u5e38\u4e3a\u53ea\u8bfb\u7684\uff0c\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u8bbf\u95ee\u6a21\u5f0f\u4f18\u5316\u8fd9\u4e24\u4e2a\u7f13\u5b58\uff0c\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5757\u5927\u5c0f\u3001\u76f8\u8054\u5ea6\u3001\u5bb9\u91cf</li> </ul> </li> </ul> <p>\u4e0b\u56fe\u662f Intel Core i7 \u5904\u7406\u5668\u7684\u9ad8\u901f\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u3002\u6bcf\u4e2a CPU \u6709\u56db\u4e2a\u6838\uff0c\u6bcf\u4e2a\u6838\u6709\u4e00\u4e2a\u72ec\u7acb\u7684 L1 d-cache \u548c L1 i-cache\uff0c\u4ee5\u53ca L2 \u7edf\u4e00\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u6240\u6709\u6838\u5171\u4eab\u4e00\u4e2a L3 \u9ad8\u901f\u7f13\u5b58\u3002</p> Cache Subsystem of Intel Core i7"},{"location":"3_memory_hierarchy/#_10","title":"\u9ad8\u901f\u7f13\u5b58\u53c2\u6570\u7684\u6027\u80fd\u5f71\u54cd","text":"<ul> <li>\u4e0d\u547d\u4e2d\u7387 (Miss Rate)\uff1a\u5728\u4e00\u4e2a\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\uff0c\u5185\u5b58\u5f15\u7528\u4e0d\u547d\u4e2d\u7684\u6bd4\u7387</li> <li>\u547d\u4e2d\u7387\uff1a1-\u4e0d\u547d\u4e2d\u7387</li> <li>\u547d\u4e2d\u65f6\u95f4 (Hit Time)\uff1a\u4ece\u9ad8\u901f\u7f13\u5b58\u4f20\u9001\u4e00\u4e2a\u5b57\u5230 CPU \u6240\u9700\u7684\u65f6\u95f4\uff0c\u5305\u62ec\u7ec4\u9009\u62e9\u3001\u884c\u786e\u8ba4\u3001\u5b57\u9009\u62e9\u7684\u65f6\u95f4\u3002\u5bf9\u4e8e L1 \u9ad8\u901f\u7f13\u5b58\uff0c\u547d\u4e2d\u65f6\u95f4\u901a\u5e38\u662f\u51e0\u4e2a\u65f6\u949f\u5468\u671f</li> <li>\u4e0d\u547d\u4e2d\u5904\u7f5a (Miss Penalty)\uff1a\u7531\u4e8e\u4e0d\u547d\u4e2d\u6240\u9700\u7684\u989d\u5916\u65f6\u95f4\u3002L1 \u4e0d\u547d\u4e2d\u7684\u65f6\u95f4\u901a\u5e38\u662f\u6570\u5341\u4e2a\u5468\u671f\uff0cL2 \u4e0d\u547d\u4e2d\u7684\u65f6\u95f4\u901a\u5e38\u662f 50 \u4e2a\u5468\u671f\u5de6\u53f3\uff0cL3 \u4e0d\u547d\u4e2d\u7684\u65f6\u95f4\u901a\u5e38\u662f\u6570\u767e\u4e2a\u5468\u671f\u3002</li> </ul> <p>\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\u7684\u5f71\u54cd</p> <p>\u4e00\u65b9\u9762\uff0c\u8f83\u5927\u7684\u9ad8\u901f\u7f13\u5b58\u53ef\u80fd\u4f1a\u63d0\u9ad8\u547d\u4e2d\u7387\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u8f83\u5927\u7684\u9ad8\u901f\u7f13\u5b58\u53ef\u80fd\u4f1a\u589e\u52a0\u547d\u4e2d\u65f6\u95f4\u3002</p> <p>\u76f8\u8054\u5ea6\u7684\u5f71\u54cd</p> <p>\u8f83\u9ad8\u7684\u76f8\u8fde\u5ea6\u964d\u4f4e\u4e86\u9ad8\u901f\u7f13\u5b58\u7531\u4e8e \u51b2\u7a81\u4e0d\u547d\u4e2d \u800c\u51fa\u73b0 \u6296\u52a8 \u7684\u53ef\u80fd\u6027\uff1b\u4f46\u662f\uff0c\u8f83\u9ad8\u7684\u76f8\u8fde\u5ea6\u4f1a\u9020\u6210\u66f4\u9ad8\u7684\u6210\u672c\uff0c\u800c\u4e14\u96be\u4ee5\u4f7f\u4e4b\u901f\u5ea6\u66f4\u5feb\u3002 \u6bcf\u4e00\u884c\u9700\u8981\u66f4\u591a\u7684\u6807\u8bb0\u4f4d\uff0c\u989d\u5916\u7684LRU\u72b6\u6001\u4f4d\u548c\u989d\u5916\u7684\u63a7\u5236\u903b\u8f91\u3002\u8f83\u9ad8\u7684\u76f8\u8fde\u5ea6\u4f1a\u589e\u52a0\u547d\u4e2d\u65f6\u95f4\uff0c\u56e0\u4e3a\u590d\u6742\u6027\u589e\u52a0\u4e86\uff0c\u53e6\u5916\u8fd8\u4f1a\u589e\u52a0\u4e0d\u547d\u4e2d\u5904\u7f5a\uff0c\u56e0\u4e3a\u9009\u62e9\u727a\u7272\u884c\u7684\u590d\u6742\u6027\u4e5f\u589e\u52a0\u4e86\u3002</p> <p>\u5757\u5927\u5c0f\u7684\u5f71\u54cd</p> <p>\u4e00\u65b9\u9762\uff0c\u8f83\u5927\u7684\u5757\u80fd\u5229\u7528\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u5e2e\u52a9\u63d0\u9ad8\u547d\u4e2d\u7387\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\uff0c\u5757\u8d8a\u5927\u5c31\u610f\u5473\u7740\u9ad8\u901f\u7f13\u5b58\u7684\u884c\u6570\u8d8a\u5c11\uff0c\u8fd9\u4f1a\u635f\u5bb3\u65f6\u95f4\u5c40\u90e8\u6027\u6bd4\u7a7a\u95f4\u5c40\u90e8\u6027\u66f4\u597d\u7684\u7a0b\u5e8f\u7684\u547d\u4e2d\u7387\u3002 \u8f83\u5927\u7684\u5757\u5bf9\u4e0d\u547d\u4e2d\u5904\u7f5a\u4e5f\u6709\u8d1f\u9762\u5f71\u54cd\uff0c\u56e0\u4e3a\u5757\u8d8a\u5927\uff0c\u4e0d\u547d\u4e2d\u65f6\u9700\u8981\u4ece\u4f4e\u4e00\u5c42\u4f20\u8f93\u7684\u6570\u636e\u8d8a\u591a\uff0c\u4f20\u9001\u65f6\u95f4\u5c31\u8d8a\u957f\u3002</p> <p>\u4e3a\u4e86\u964d\u4f4e\u4e0d\u547d\u4e2d\u5904\u7f5a\uff0c\u53ef\u4ee5\u8003\u8651\u91c7\u7528\u5982\u4e0b\u7684\u63aa\u65bd\uff1a</p> <ul> <li>Early Restart: datapath resumes execution as soon as the requested word of the block is returned.</li> <li>Requested word first: requested word is transferred from the memory to the cache (and datapath) first.</li> <li>Non-blocking cache: cache can accept new requests while miss is outstanding. (Out-of-order execution)</li> </ul> <p>\u5199\u7b56\u7565\u7684\u5f71\u54cd</p> <p>\u76f4\u5199\u9ad8\u901f\u7f13\u5b58\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\uff0c\u800c\u4e14\u80fd\u4f7f\u7528\u72ec\u7acb\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u5199\u7f13\u51b2\u533a\uff0c\u7528\u6765\u66f4\u65b0\u5185\u5b58\u3002\u53e6\u5916\uff0c\u8bfb\u4e0d\u547d\u4e2d\u7684\u5f00\u9500\u6ca1\u6709\u8fd9\u4e48\u5927\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u4f1a\u89e6\u53d1\u5185\u5b58\u5199\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5199\u56de\u9ad8\u901f\u7f13\u5b58\u5f15\u8d77\u7684\u4f20\u9001\u6bd4\u8f83\u5c11\uff0c\u5b83\u8fd0\u8bad\u66f4\u591a\u7684\u5230\u5185\u5b58\u7684\u5e26\u5bbd\u7528\u4e8e\u6267\u884cDMA\u7684I/O\u8bbe\u5907\u3002\u6b64\u5916\uff0c\u8d8a\u5f80\u5c42\u6b21\u7ed3\u6784\u5e95\u5c42\u8d70\uff0c\u4f20\u9001\u65f6\u95f4\u589e\u52a0\uff0c\u51cf\u5c11\u4f20\u9001\u7684\u6570\u91cf\u5c31\u53d8\u5f97\u66f4\u52a0\u91cd\u8981\u3002</p> <p>\u4e00\u822c\u800c\u8a00\uff0c\u9ad8\u901f\u7f13\u5b58\u8d8a\u5f80\u4e0b\u5c42\uff0c\u5199\u56de\u7b56\u7565\u8d8a\u6709\u5229\u3002</p>"},{"location":"3_memory_hierarchy/#_11","title":"\u635f\u5931\u4ee3\u4ef7\u4e0e\u4e71\u5e8f\u6267\u884c\u5904\u7406\u5668","text":"<ul> <li>\u5b9a\u4e49\u7f3a\u5931\u4ee3\u4ef7\u4e3a \u975e\u91cd\u53e0\u5ef6\u8fdf</li> <li>\\frac{\u5b58\u50a8\u5668\u505c\u987f\u5468\u671f}{\u6307\u4ee4}=\\frac{\u7f3a\u5931\u6570}{\u6307\u4ee4}\\times (\u603b\u7f3a\u5931\u5ef6\u8fdf-\u91cd\u53e0\u7f3a\u5931\u5ef6\u8fdf)</li> <li>\u5b58\u50a8\u5668\u5ef6\u8fdf\u957f\u5ea6\u2014\u2014\u5728\u4e71\u5e8f\u6267\u884c\u5904\u7406\u5668\u4e2d\u5982\u4f55\u786e\u5b9a\u5b58\u50a8\u5668\u64cd\u4f5c\u7684\u8d77\u6b62\u65f6\u523b</li> <li>\u5ef6\u8fdf\u91cd\u53e0\u7684\u957f\u5ea6\u2014\u2014\u5982\u4f55\u786e\u5b9a\u4e0e\u5904\u7406\u5668\u91cd\u53e0\u7684\u8d77\u59cb\u65f6\u523b</li> </ul>"},{"location":"3_memory_hierarchy/#_12","title":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u8bbe\u8ba1","text":""},{"location":"3_memory_hierarchy/#10","title":"\u4f18\u5316\u7f13\u5b58\u7684 10 \u79cd\u9ad8\u7ea7\u65b9\u6cd5","text":"<ol> <li> <p>\u91c7\u7528\u5c0f\u800c\u7b80\u5355\u7684\u7b2c\u4e00\u7ea7\u7f13\u5b58\uff0c\u7f29\u77ed\u547d\u4e2d\u65f6\u95f4\u3001\u964d\u4f4e\u529f\u8017</p> <ul> <li>\u7f13\u5b58\u547d\u4e2d\u7684\u5173\u952e\u8ba1\u65f6\u8def\u5f84\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a<ul> <li>\u4f7f\u7528\u5730\u5740\u4e2d\u7684\u7d22\u5f15\u786e\u5b9a\u6807\u7b7e\u5b58\u50a8\u5668\u7684\u5730\u5740</li> <li>\u5c06\u8bfb\u53d6\u7684\u6807\u7b7e\u503c\u4e0e\u5730\u5740\u8fdb\u884c\u6bd4\u8f83</li> <li>\u82e5\u7f13\u5b58\u4e3a\u7ec4\u76f8\u8054\uff0c\u5219\u8bbe\u7f6eMUX\u9009\u62e9\u6b63\u786e\u7684\u6570\u636e\u9879</li> </ul> </li> <li>\u4f7f\u7528\u8f83\u4f4e\u7ea7\u522b\u7684\u76f8\u8054\u5ea6\u53ef\u4ee5\u7f29\u77ed\u547d\u4e2d\u65f6\u95f4\u3001\u964d\u4f4e\u529f\u8017</li> <li>\u964d\u4f4e\u529f\u8017\uff1a\u589e\u5927\u5757\u5927\u5c0f\u3001\u591a\u4f53\u7f13\u5b58\uff08\u5c06\u7f13\u5b58\u5206\u4e3a\u591a\u4e2a\u5b58\u50a8\u4f53\uff0c\u6bcf\u6b21\u53ea\u6fc0\u6d3b\u4e00\u90e8\u5206\uff09</li> </ul> </li> <li> <p>\u91c7\u7528\u8def\u9884\u6d4b\u4ee5\u7f29\u77ed\u547d\u4e2d\u65f6\u95f4</p> <ul> <li>\u5728 \u8def\u9884\u6d4b\u6280\u672f (Way Prediction) \u4e2d\uff0c\u7f13\u5b58\u4e2d\u53e6\u5916\u4fdd\u5b58\u4e86\u4e00\u4e9b\u4f4d\uff0c\u7528\u4e8e\u9884\u6d4b \u4e0b\u4e00\u6b21 \u7f13\u5b58\u8bbf\u95ee\u4e2d\u7684\u8def\uff08\u5373\u7ec4\u4e2d\u7684\u5757\uff09<ul> <li>\u63d0\u524d\u8bbe\u5b9a\u591a\u8def\u590d\u7528\u5668\uff0c\u4ee5\u9009\u62e9\u6240\u9700\u8981\u7684\u5757</li> <li>\u5728\u8fd9\u4e2a\u65f6\u949f\u5468\u671f\u4e2d\uff0c\u5728\u8bfb\u53d6\u7f13\u5b58\u6570\u636e\u7684\u540c\u65f6\uff0c\u53ea\u9700\u8981\u5e76\u884c\u6267\u884c\u4e00\u6b21\u6807\u7b7e\u6bd4\u8f83</li> <li>\u5982\u679c\u7f3a\u5931\uff0c\u4f1a\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u4e2d\u518d\u67e5\u770b\u5176\u5b83\u5757\uff0c\u4ee5\u627e\u51fa\u5339\u914d\u9879</li> </ul> </li> <li>\u5728\u4e00\u4e2a\u7f13\u5b58\u7684\u6bcf\u4e2a\u5757\u6dfb\u52a0 \u5757\u9884\u6d4b\u4f4d \uff0c\u6839\u636e\u8fd9\u4e9b\u4e3a\u9009\u5b9a\u5728\u4e0b\u4e00\u6b21\u7f13\u5b58\u8bbf\u95ee\u4e2d\u5c1d\u8bd5\u54ea\u4e9b\u5757<ul> <li>\u5982\u679c\u9884\u6d4b\u6b63\u786e\uff0c\u7f13\u5b58\u8bbf\u95ee\u5ef6\u8fdf\u5c31\u7b49\u4e8e\u8fd9\u4e00\u5feb\u901f\u547d\u4e2d\u65f6\u95f4</li> <li>\u5982\u679c\u9884\u6d4b\u9519\u8bef\uff0c\u5219\u5c1d\u8bd5\u5176\u4ed6\u5757\uff0c\u6539\u53d8\u8def\u9884\u6d4b\u5176</li> </ul> </li> <li>\u4e00\u79cd\u6269\u5c55\u5f62\u5f0f\u7684\u8def\u9884\u6d4b\u2014\u2014\u4f7f\u7528\u8def\u9884\u6d4b\u4f4d\u6765\u5224\u65ad\u5b9e\u9645\u8bbf\u95ee\u7684\u7f13\u5b58\u5757\uff0c\u7528\u6765\u964d\u4f4e\u529f\u8017\uff0c\u79f0\u4e3a \u8def\u9009\u62e9 (Way Selection)</li> </ul> </li> <li> <p>\u901a\u8fc7\u7f13\u5b58\u8bbf\u95ee\u6d41\u6c34\u5316\u548c\u91c7\u7528\u591a\u4f53\u7f13\u5b58\u6765\u63d0\u5347\u5e26\u5bbd</p> <ul> <li>L1 \u7f13\u5b58\u5b9e\u73b0\u6d41\u6c34\u5316\u540e\uff0c\u65f6\u949f\u9891\u7387\u4e0a\u5347\uff0c\u4f46\u662f\u4f1a\u589e\u52a0\u5ef6\u8fdf</li> <li>\u6307\u4ee4\u7f13\u5b58\u8bbf\u95ee\u7684\u6d41\u6c34\u5316\u5b9e\u73b0\u4e0a\u589e\u52a0\u4e86\u6d41\u6c34\u7ebf\u7684\u6bb5\u6570\uff0c\u589e\u52a0\u4e86\u5206\u652f\u9884\u6d4b\u9519\u8bef\u7684\u4ee3\u4ef7</li> <li>\u6570\u636e\u7f13\u5b58\u7684\u6d41\u6c34\u5316\u589e\u52a0\u4e86\u4ece\u53d1\u51fa\u8f7d\u5165\u6307\u4ee4\u5230\u4f7f\u7528\u6570\u636e\u4e4b\u95f4\u7684\u65f6\u949f\u5468\u671f\u6570</li> <li>\u6307\u4ee4\u7f13\u5b58\u7684\u6d41\u6c34\u5316\u76f8\u5bf9\u5bb9\u6613\uff0c\u56e0\u4e3a\u5904\u7406\u5668\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u9ad8\u6027\u80fd\u7684\u5206\u652f\u9884\u6d4b\u6765\u51cf\u8f7b\u5ef6\u8fdf\u9020\u6210\u7684\u5f71\u54cd</li> <li>\u4e3a\u4e86\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u5185\u5904\u7406\u591a\u4e2a\u6570\u636e\u7f13\u5b58\u8bbf\u95ee\uff0c \u5c06\u7f13\u5b58\u5212\u5206\u4e3a\u72ec\u7acb\u7684\u5b58\u50a8\u4f53 \uff0c\u6bcf\u4e2a\u5b58\u50a8\u4f53\u4e3a\u4e00\u6b21\u72ec\u7acb\u7684\u8bbf\u95ee\u63d0\u4f9b\u652f\u6301<ul> <li>\u76ee\u6807\uff1a\u8bbf\u95ee\u8bf7\u6c42\u5747\u5300\u5206\u5e03\u5728\u7f13\u5b58\u7ec4\u4e4b\u95f4\uff0c\u4ee5\u8fbe\u5230\u6700\u4f73\u7684\u5206\u4f53\u6548\u679c</li> <li>\u5b9e\u73b0\u65b9\u6cd5\uff1a\u4f18\u5316\u5730\u5740\u6620\u5c04\u5230\u5b58\u50a8\u4f53\u7684\u65b9\u5f0f\u3002\u4e00\u79cd\u7b80\u5355\u6709\u6548\u7684\u6620\u5c04\u65b9\u5f0f\uff1a\u5c06\u7f13\u5b58\u5757\u5730\u5740\u6309\u987a\u5e8f\u5206\u6563\u5728\u8fd9\u4e9b\u5b58\u50a8\u4f53\u4e4b\u4e2d\u2014\u2014 \u987a\u5e8f\u4ea4\u9519 (Sequential Interleaving)</li> </ul> </li> <li>\u5206\u4f53\u7f13\u5b58\u7684\u5176\u4ed6\u597d\u5904\uff1a\u5b9e\u73b0\u975e\u963b\u585e\u5f0f\u7f13\u5b58\u3001\u964d\u4f4e\u529f\u8017</li> </ul> </li> <li> <p>\u91c7\u7528 \u975e\u963b\u585e\u7f13\u5b58 \uff0c\u4ee5\u589e\u52a0\u7f13\u5b58\u5e26\u5bbd</p> <ul> <li>\u5bf9\u4e8e\u5141\u8bb8\u4e71\u5e8f\u6267\u884c\u7684\u6d41\u6c34\u5316\u8ba1\u7b97\u673a\uff0c\u5176\u5904\u7406\u5668\u4e0d\u5fc5\u56e0\u4e3a\u4e00\u6b21\u6570\u636e\u7f13\u5b58\u7f3a\u5931\u800c\u505c\u987f</li> <li>\u975e\u963b\u585e\u7f13\u5b58 (Non-blocking Cache)\uff0c\u6216\u79f0\u65e0\u9501\u7f13\u5b58 (Lockup-free Cache)\uff0c\u5141\u8bb8\u6570\u636e\u7f13\u5b58\u518d\u4e00\u6b21\u786e\u5b9e\u671f\u95f4\u7ee7\u7eed\u63d0\u4f9b\u7f13\u5b58\u547d\u4e2d</li> <li>\u6b64\u5916\uff0c\u5982\u679c\u80fd\u591f\u91cd\u53e0\u591a\u4e2a\u7f3a\u5931\uff0c\u7f13\u5b58\u80fd\u8fdb\u4e00\u6b65\u964d\u4f4e\u5b9e\u9645\u7684\u7f3a\u5931\u4ee3\u4ef7\uff0c\u5373\u591a\u6b21\u7f3a\u5931\u65f6\u4f9d\u7136\u547d\u4e2d (Hit under multiple miss) \u6216\u8005\u7f3a\u5931\u65f6\u7f3a\u5931 (Miss under miss)</li> <li>\u975e\u963b\u585e\u7f13\u5b58\u7684\u5b9e\u73b0<ul> <li>\u4ef2\u88c1\u547d\u4e2d\u548c\u7f3a\u5931\u4e4b\u95f4\u7684\u51b2\u7a81\uff1a\u975e\u963b\u585e\u7f13\u5b58\u4e2d\uff0c\u547d\u4e2d\u53ef\u80fd\u4f1a\u4e0e\u4f4e\u4e00\u7ea7\u5b58\u50a8\u5668\u4e2d\u8fd4\u56de\u7684\u7f3a\u5931\u53d1\u751f\u51b2\u7a81<ul> <li>\u9996\u5148\u4e3a\u547d\u4e2d\u8d4b\u4e88\u6bd4\u7f3a\u5931\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7</li> <li>\u5176\u6b21\u5728\u51fa\u73b0\u4e92\u76f8\u51b2\u7a81\u7684\u7f3a\u5931\u65f6\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f</li> </ul> </li> <li>\u8ddf\u8e2a\u5c1a\u672a\u89e3\u51b3\u7684\u7f3a\u5931\uff0c\u4ee5\u4fbf\u77e5\u9053\u4f55\u65f6\u53ef\u4ee5\u5904\u7406\u8f7d\u5165\u6216\u5b58\u50a8\u64cd\u4f5c</li> <li>\u7b80\u5355\u60c5\u51b5\uff1a\u7f3a\u5931\u603b\u662f\u6309\u7167\u987a\u5e8f\u8fd4\u56de\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u7b80\u5355\u7684\u961f\u5217\uff0c\u5148\u8fd4\u56de\u7b49\u5f85\u65f6\u95f4\u6700\u957f\u7684\u7f3a\u5931<ul> <li>\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\uff1aL1 \u4e2d\u7684\u7f3a\u5931\u53ef\u80fd\u5728 L2 \u4e2d\u53d1\u751f\u7f3a\u5931\uff0c\u82e5 L2 \u662f\u975e\u963b\u585e\u7684\uff0c\u90a3\u4e48\u7f3a\u5931\u7684\u8fd4\u56de\u987a\u5e8f\u672a\u5fc5\u4e0e\u53d1\u751f\u987a\u5e8f\u4e00\u81f4\uff1b\u7f13\u5b58\u8bbf\u95ee\u65f6\u95f4\u4e0d\u4e00\u81f4\u7684\u591a\u548c\u7cfb\u7edf\u4ee5\u53ca\u5176\u4ed6\u591a\u5904\u7406\u5668\u7cfb\u7edf\uff0c\u4e5f\u53ef\u80fd\u4f1a\u5f15\u5165\u8fd9\u4e00\u590d\u6742\u6027</li> </ul> </li> <li>\u8fd4\u56de\u7f3a\u5931\u65f6\uff0c\u5904\u7406\u5668\u5fc5\u987b\u77e5\u9053\uff1a<ul> <li>\u54ea\u4e2a\u8f7d\u5165\u6216\u5b58\u50a8\u64cd\u4f5c\u5bfc\u81f4\u6b64\u6b21\u7684\u7f3a\u5931</li> <li>\u5c06\u6570\u636e\u653e\u5230\u7f13\u5b58\u4e2d\u7684\u4ec0\u4e48\u4f4d\u7f6e\uff08\u9488\u5bf9\u6b64\u5757\u7684\u6807\u7b7e\u8bbe\u7f6e\uff09</li> </ul> </li> <li>\u8fd9\u4e9b\u4fe1\u606f\u4fdd\u5b58\u5728\u4e00\u7ec4\u5bc4\u5b58\u5668\u4e2d\uff0c\u79f0\u4e3a \u7f3a\u5931\u72b6\u6001\u5904\u7406\u5bc4\u5b58\u5668 (Miss Status Handling Register, MSHR)</li> <li>\u53d1\u751f\u7f3a\u5931\u65f6\uff0c\u5206\u914d\u4e00\u4e2a MSHR \u5904\u7406\u6b64\u6b21\u7f3a\u5931\uff0c\u5206\u914d\u4e00\u4e2a MSHR \u7684\u7d22\u5f15\u53f7\uff0c\u4ee5\u6b64\u6807\u8bb0\u5b58\u50a8\u5668\u7684\u8bf7\u6c42</li> <li>\u5b58\u50a8\u5668\u7cfb\u7edf\u5728\u8fd4\u56de\u6570\u636e\u65f6\u4f7f\u7528\u8be5\u6807\u7b7e\uff0c\u4ece\u800c\u4f7f\u7f13\u5b58\u7cfb\u7edf\u80fd\u591f\u5c06\u6570\u636e\u548c\u6807\u7b7e\u4fe1\u606f\u4f20\u9001\u7ed9\u9002\u5f53\u7684\u7f13\u5b58\u5757</li> <li>\u5e76\u5411\u751f\u6210\u8be5\u7f3a\u5931\u7684\u8f7d\u5165/\u5b58\u50a8\u64cd\u4f5c\u53d1\u51fa\u201c\u901a\u77e5\u201d\uff0c\u4f7f\u5176\u6062\u590d\u6267\u884c</li> </ul> </li> </ul> </li> <li> <p>\u5229\u7528\u5173\u952e\u5b57\u4f18\u5148\u548c\u63d0\u524d\u91cd\u65b0\u6267\u884c\u4ee5\u964d\u4f4e\u635f\u5931\u4ee3\u4ef7</p> <ul> <li>\u5904\u7406\u5668\u901a\u5e38\u4e00\u6b21\u4ec5\u9700\u8981\u7f13\u5b58\u5757\u4e2d\u7684\u4e00\u4e2a\u5b57\uff0c\u65e0\u9700\u7b49\u5f85\u6574\u4e2a\u5757\u8f7d\u5165\u5b8c\u6210\uff0c\u5373\u53ef\u4ee5\u53d1\u9001\u8bf7\u6c42\u7684\u5b57\u5e76\u91cd\u65b0\u6267\u884c\u5904\u7406\u5668</li> <li>\u5173\u952e\u5b57\u4f18\u5148<ul> <li>\u9996\u5148\u4ece\u5b58\u50a8\u5668\u4e2d\u8bf7\u6c42\u7f3a\u5931\u7684\u5b57\uff0c\u5728\u5176\u8fbe\u5230\u7f13\u5b58\u540e\u7acb\u523b\u53d1\u9001\u7ed9\u5904\u7406\u5668</li> <li>\u5904\u7406\u5668\u80fd\u591f\u5728\u8f7d\u5165\u5757\u4e2d\u5176\u4ed6\u7684\u5b57\u65f6\u7ee7\u7eed\u6267\u884c</li> </ul> </li> <li>\u63d0\u524d\u91cd\u65b0\u6267\u884c<ul> <li>\u4ee5\u6b63\u5e38\u987a\u5e8f\u63d0\u53d6\u5b57\uff0c\u4f46\u53ea\u8981\u5757\u4e2d\u7684\u88ab\u8bf7\u6c42\u5b57\u8fbe\u5230\u7f13\u5b58\uff0c\u5c31\u7acb\u5373\u5c06\u5176\u53d1\u9001\u7ed9\u5904\u7406\u5668\uff0c\u8ba9\u5904\u7406\u5668\u7ee7\u7eed\u6267\u884c</li> </ul> </li> </ul> </li> <li> <p>\u5408\u5e76\u5199\u7f13\u51b2\u533a\u4ee5\u964d\u4f4e\u7f3a\u5931\u4ee3\u4ef7</p> <ul> <li>\u5199\u7f13\u51b2\u533a\u5305\u542b\u7ecf\u8fc7\u4fee\u6539\u7684\u5757</li> <li>\u68c0\u67e5\u5176\u4ed6\u7ecf\u8fc7\u4fee\u6539\u7684\u5757\u7684\u5730\u5740\u662f\u5426\u5339\u914d\u5199\u7f13\u51b2\u533a\u4e2d\u67d0\u4e2a\u6761\u76ee\u7684\u6709\u6548\u5730\u5740</li> <li>\u5982\u679c\u5339\u914d\uff0c\u5219\u5c06\u65b0\u6570\u636e\u4e0e\u8fd9\u4e2a\u6761\u76ee\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u79f0\u4e3a \u5199\u5408\u5e76 (Write Merging)</li> </ul> </li> <li> <p>\u91c7\u7528\u7f16\u8bd1\u5668\u4f18\u5316\u4ee5\u964d\u4f4e\u7f3a\u5931\u7387\uff08\u8f6f\u4ef6\u4f18\u5316\uff09</p> <ul> <li>\u5faa\u73af\u4ea4\u6362<ul> <li>\u7a0b\u5e8f\u4e2d\u5b58\u5728\u5d4c\u5957\u5faa\u73af\uff0c\u4ee5\u975e\u8fde\u7eed\u987a\u5e8f\u8bbf\u95ee\u5b58\u50a8\u5668\u4e2d\u7684\u6570\u636e</li> <li>\u4ea4\u6362\u5faa\u73af\u7684\u5d4c\u5957\u987a\u5e8f\uff0c\u4f7f\u5f97\u987a\u5e8f\u8bbf\u95ee\u5b58\u50a8\u5668</li> </ul> </li> <li>\u5206\u5757<ul> <li>\u901a\u8fc7\u6539\u5584\u65f6\u95f4\u5c40\u90e8\u6027\u6765\u51cf\u5c11\u7f13\u5b58\u786e\u5b9e</li> </ul> </li> </ul> </li> <li> <p>\u5bf9\u6307\u4ee4\u548c\u6570\u636e\u8fdb\u884c\u786c\u4ef6\u9884\u53d6\uff0c\u4ee5\u964d\u4f4e\u7f3a\u5931\u4ee3\u4ef7\u6216\u7f3a\u5931\u7387</p> <ul> <li>\u5728\u5904\u7406\u5668\u771f\u6b63\u9700\u8981\u67d0\u4e2a\u6570\u636e\u4e4b\u524d\uff0c\u9884\u5148\u83b7\u53d6\u4ed6\u4eec</li> <li>\u6307\u4ee4\u548c\u6570\u636e\u90fd\u53ef\u4ee5\u9884\u5148\u63d0\u53d6\uff0c\u5373\u53ef\u4ee5\u76f4\u63a5\u653e\u5728\u7f13\u5b58\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u4e00\u4e2a\u8bbf\u95ee\u901f\u5ea6\u5feb\u4e8e\u4e3b\u5b58\u50a8\u5668\u7684\u5916\u90e8\u7f13\u51b2\u533a</li> <li>\u9884\u53d6\u64cd\u4f5c\u9700\u8981\u5229\u7528\u7a7a\u95f2\u7684\u5b58\u50a8\u5e26\u5bbd\uff0c\u4f46\u5982\u679c\u5b83\u5e72\u6270\u4e86\u5176\u4ed6\u5173\u952e\u8def\u5f84\u7f3a\u5931\u5185\u5bb9\u7684\u8bbf\u95ee\uff0c\u53cd\u800c\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d</li> <li>\u5982\u679c\u9884\u53d6\u7684\u6570\u636e\u672a\u88ab\u7528\u5230\u6216\u8005\u66ff\u6362\u4e86\u6709\u7528\u6570\u636e\uff0c\u9884\u53d6\u64cd\u4f5c\u4f1a\u5bf9\u529f\u8017\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd</li> </ul> </li> <li> <p>\u7528\u7f16\u8bd1\u5668\u63a7\u5236\u9884\u53d6\uff0c\u4ee5\u964d\u4f4e\u7f3a\u5931\u4ee3\u4ef7\u6216\u7f3a\u5931\u7387</p> <ul> <li>\u5c06\u6267\u884c\u8fc7\u7a0b\u4e0e\u6570\u636e\u9884\u53d6\u8fc7\u7a0b\u91cd\u53e0</li> <li>\u5bc4\u5b58\u5668\u9884\u53d6 \u5c06\u6570\u636e\u503c\u8f7d\u5165\u4e00\u4e2a\u5bc4\u5b58\u5668\u5f53\u4e2d</li> <li>\u7f13\u5b58\u9884\u53d6 \u4ec5\u5c06\u6570\u636e\u8f7d\u5165\u7f13\u5b58\uff0c\u800c\u4e0d\u8f7d\u5165\u5bc4\u5b58\u5668</li> <li>\u53ea\u6709\u5728\u5904\u7406\u5668\u9884\u53d6\u6570\u636e\u65f6\u80fd\u591f\u7ee7\u7eed\u5de5\u4f5c\uff0c\u9884\u53d6\u624d\u6709\u610f\u4e49</li> <li>\u53d1\u51fa\u9884\u53d6\u6307\u4ee4\u4f1a\u5e26\u6765\u6307\u4ee4\u5f00\u9500</li> </ul> </li> <li> <p>\u4f7f\u7528 HBM \u6269\u5c55\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784</p> </li> <li> <p>\u4f7f\u7528\u4e0e\u8ba1\u7b97\u82af\u7247\u5c01\u88c5\u5728\u4e00\u8d77\u7684 DRAM \u6784\u5efa\u5927\u5bb9\u91cf\u7684 L4 \u7f13\u5b58</p> </li> <li>\u57fa\u4e8e DRAM \u7684\u7f13\u5b58\u5e26\u6765\u7684\u95ee\u9898\uff1a\u7f13\u5b58\u6807\u7b7e\u7684\u5b58\u653e -&gt; \u589e\u5927\u5757\u7684\u5927\u5c0f<ul> <li>\u5982\u679c\u8bb8\u591a\u5757\u4e2d\u7684\u5185\u5bb9\u90fd\u7528\u4e0d\u5230\uff0c\u7f13\u5b58\u7684\u4f7f\u7528\u6548\u7387\u4f1a\u4e0b\u964d -&gt; \u788e\u7247\u5316\u95ee\u9898<ul> <li>\u89e3\u51b3\u65b9\u6cd5\uff1a\u589e\u52a0 \u5b50\u5757 \uff1a\u5141\u8bb8\u7f13\u5b58\u884c\u4e2d\u53ea\u6709\u90e8\u5206\u6570\u636e\u662f\u6709\u6548\u7684\uff0c\u5f53\u53d1\u751f\u7f3a\u5931\u65f6\uff0c\u53ea\u83b7\u53d6\u5176\u4e2d\u6709\u6548\u7684\u5b50\u5757</li> </ul> </li> <li>\u7531\u4e8e\u6570\u636e\u5757\u6bd4\u8f83\u5927\uff0cDRAM \u7f13\u5b58\u4e2d\u4fdd\u5b58\u7684\u4e0d\u540c\u6570\u636e\u5757\u7684\u6570\u76ee\u5c11\u5f97\u591a\uff0c\u5bfc\u81f4\u66f4\u591a\u7684\u7f3a\u5931</li> </ul> </li> </ol>"},{"location":"4_pipelining/","title":"CPU Pipelining","text":"<p>\u672c\u8282\u5185\u5bb9</p> <p>\u672c\u8282\u5185\u5bb9\u4e3b\u8981\u6765\u81ea CMU 447 \u7b2c 7\u30018 \u8bb2\uff0c\u4ee5\u53ca\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff1a\u91cf\u5316\u7814\u7a76\u65b9\u6cd5\u300b\u9644\u5f55 C\uff1a\u6d41\u6c34\u7ebf\u57fa\u7840\u4e0e\u4e2d\u7ea7\u6982\u5ff5\u3002</p>"},{"location":"4_pipelining/#pipelining-basic-idea","title":"Pipelining: Basic Idea","text":"<ul> <li>divide the instruction processing style into distinct stages of processing</li> <li>ensure that there are enough hardware resources to process one instruction in each stage</li> <li>process a different instruction in each stage</li> <li>thus increasing instruction throughput</li> </ul>"},{"location":"4_pipelining/#an-ideal-pipeline","title":"An Ideal Pipeline","text":"<ul> <li>increase throughput with little increase in cost (hardware cost)</li> <li>repetition of identical operations</li> <li>repetition of independent operations</li> <li>uniformly partitionable suboperations</li> </ul>"},{"location":"4_pipelining/#instruction-pipeline-not-an-ideal-pipeline","title":"Instruction Pipeline: Not an Ideal Pipeline","text":"<ul> <li>diffrent instructions -&gt; not all instructions need the same stages</li> <li>forcing different instructions to go through the same pipeline stages</li> <li>external fragmentation: some pipeline stages idle for some instructions</li> <li>different pipeline stages -&gt; not the same latency</li> <li>need to force each stage to be controlled by the same clock</li> <li>internal fragmentation (some pipeline stages are too fast but all take the same clock cycle)</li> <li>instructions are not independent of each other</li> <li>need to detect and resolve inter-instruction dependencies to ensure the pipeline provides correct values -&gt; pipeline stalls</li> </ul>"},{"location":"4_pipelining/#_1","title":"\u5f15\u8a00","text":""},{"location":"4_pipelining/#risc-v","title":"RISC-V \u6307\u4ee4\u96c6\u57fa\u7840\u77e5\u8bc6","text":"<ul> <li>\u8f7d\u5165-\u5b58\u50a8\u4f53\u7cfb\u7ed3\u6784 ISA</li> <li>\u6240\u6709\u6570\u636e\u64cd\u4f5c\u90fd\u662f\u5bf9\u5bc4\u5b58\u5668\u4e2d\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u901a\u5e38\u4f1a\u6539\u53d8\u6574\u4e2a\u5bc4\u5b58\u5668</li> <li>\u53ea\u6709\u8f7d\u5165\u548c\u5b58\u50a8\u64cd\u4f5c\u4f1a\u5f71\u54cd\u5b58\u50a8\u5668</li> <li>\u683c\u5f0f\u6307\u4ee4\u76f8\u5bf9\u56fa\u5b9a\uff0c\u6240\u6709\u6307\u4ee4\u4f4d\u5bbd\u901a\u5e38\u76f8\u540c</li> </ul>"},{"location":"4_pipelining/#risc","title":"RISC \u6307\u4ee4\u96c6\u7684\u7b80\u5355\u5b9e\u73b0","text":"<ul> <li>\u5173\u6ce8 RISC \u4f53\u7cfb\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u6574\u6570\u5b50\u96c6\u7684\u6d41\u6c34\u7ebf\uff0c\u5305\u62ec\uff1a\u8f7d\u5165-\u5b58\u50a8\u5b57\u3001\u5206\u652f\u548c\u6574\u6570 ALU \u64cd\u4f5c</li> <li>RISC \u5b50\u96c6\u7684\u6bcf\u6761\u6307\u4ee4\u90fd\u53ef\u4ee5\u5728\u6700\u591a5\u4e2a\u65f6\u949f\u5468\u671f\u5185\u5b9e\u73b0\uff1a</li> <li>\u53d6\u6307\u5468\u671f (Instruction Fetch, IF)<ul> <li>\u5c06\u7a0b\u5e8f\u8ba1\u6570\u5668\u53d1\u9001\u5230\u5b58\u50a8\u5668\uff0c\u4ece\u5b58\u50a8\u5668\u4e2d\u63d0\u53d6\u5f53\u524d\u6307\u4ee4</li> <li>\u5411\u7a0b\u5e8f\u8ba1\u6570\u5668 +4\uff08\u6bcf\u6761\u6307\u4ee4\u7684\u957f\u5ea6\u4e3a\u56db\u4e2a\u5b57\u8282\uff0c\u5c06\u7a0b\u5e8f\u8ba1\u6570\u5668\u66f4\u65b0\u5230\u4e0b\u4e00\u6761\u987a\u5e8f\u6307\u4ee4</li> </ul> </li> <li>\u6307\u4ee4\u8bd1\u7801/\u8bfb\u5bc4\u5b58\u5668\u5468\u671f (Instruction decode and register operand fetch, ID/RF)<ul> <li>\u5bf9\u6307\u4ee4\u8bd1\u7801\uff0c\u5e76\u4e14\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u53d6\u4e0e\u5bc4\u5b58\u5668\u6e90\u8bf4\u660e\u7b26\u76f8\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668</li> <li>\u5728\u8bfb\u53d6\u5bc4\u5b58\u5668\u65f6\u5bf9\u5176\u8fdb\u884c\u76f8\u7b49\u6d4b\u8bd5\uff0c\u4ee5\u786e\u5b9a\u53ef\u80fd\u7684\u5206\u652f</li> <li>\u5728\u540e\u7eed\u9700\u8981\u65f6\uff0c\u5bf9\u6307\u4ee4\u7684\u504f\u79fb\u91cf\u5b57\u6bb5\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\uff0c\u5e76\u589e\u52a0\u5230\u7a0b\u5e8f\u8ba1\u6570\u5668\u4e0a\uff0c\u8ba1\u7b97\u51fa\u53ef\u80fd\u7684\u5206\u652f\u76ee\u6807\u5730\u5740</li> <li>\u6307\u4ee4\u8bd1\u7801\u4e0e\u5bc4\u5b58\u5668\u7684\u8bfb\u53d6\u7684\u5e76\u884c\u6267\u884c\u7684\uff0c\u56e0\u4e3a RISC \u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u5bc4\u5b58\u5668\u8bf4\u660e\u7b26\u4f4d\u4e8e\u56fa\u5b9a\u4f4d\u7f6e\uff0c\u8fd9\u4e00\u6280\u672f\u79f0\u4e3a\u56fa\u5b9a\u5b57\u6bb5\u8bd1\u7801</li> <li>\u5bf9\u4e8e\u8f7d\u5165\u548c ALU \u6307\u4ee4\u7684\u7acb\u5373\u6570\u64cd\u4f5c\uff0c\u7acb\u5373\u6570\u5b57\u6bb5\u603b\u662f\u5728\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u53ef\u4ee5\u8fdb\u884c\u7b26\u53f7\u6269\u5c55</li> </ul> </li> <li>\u6267\u884c/\u6709\u6548\u5730\u5740\u5468\u671f (Execute/Evaluate memory address, EX/AG)<ul> <li>ALU \u5bf9\u4e0a\u4e00\u5468\u5176\u4e2d\u51c6\u5907\u7684\u64cd\u4f5c\u6570\u8fdb\u884c\u64cd\u4f5c\uff0c\u6839\u636e\u6307\u4ee4\u7c7b\u578b\u6267\u884c\u56db\u79cd\u64cd\u4f5c\u4e4b\u4e00</li> <li>\u5b58\u50a8\u5668\u8bbf\u95ee\u2014\u2014ALU \u5c06\u57fa\u5740\u5bc4\u5b58\u5668\u548c\u504f\u79fb\u91cf\u52a0\u5230\u4e00\u8d77\uff0c\u5f62\u6210\u6709\u6548\u5730\u5740</li> <li>\u5bc4\u5b58\u5668-\u5bc4\u5b58\u5668 ALU \u6307\u4ee4\u2014\u2014ALU \u5bf9\u8bfb\u81ea\u5bc4\u5b58\u5668\u5806\u7684\u503c\u6267\u884c\u7531 ALU \u64cd\u4f5c\u7801\u6307\u5b9a\u7684\u64cd\u4f5c</li> <li>\u5bc4\u5b58\u5668-\u7acb\u5373\u6570 ALU \u6307\u4ee4\u2014\u2014ALU \u5bf9\u8bfb\u81ea\u5bc4\u5b58\u5668\u5806\u7684\u7b2c\u4e00\u4e2a\u503c\u548c\u7b26\u53f7\u6269\u5c55\u7acb\u5373\u6570\u6267\u884c\u7531 ALU \u64cd\u4f5c\u7801\u6307\u5b9a\u7684\u64cd\u4f5c</li> <li>\u6761\u4ef6\u5206\u652f\u2014\u2014\u5224\u65ad\u6761\u4ef6\u662f\u5426\u4e3a\u771f</li> <li>\u5728\u8f7d\u5165-\u5b58\u50a8\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u6709\u6548\u5730\u5740\u4e0e\u6267\u884c\u5468\u671f\u53ef\u4ee5\u5408\u5e76\u5230\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5f53\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a\u6ca1\u6709\u6307\u4ee4\u9700\u8981\u540c\u65f6\u8ba1\u7b97\u6570\u636e\u5730\u5740\u5e76\u5bf9\u6570\u636e\u6267\u884c\u64cd\u4f5c</li> </ul> </li> <li>\u5b58\u50a8\u5668\u8bbf\u95ee (Memory operand fetch, MEM)</li> <li>\u5199\u56de\u5468\u671f (Store/Writeback result, WB)</li> </ul>"},{"location":"4_pipelining/#risc_1","title":"RISC \u5904\u7406\u5668\u7684\u7ecf\u5178\u4e94\u7ea7\u6d41\u6c34\u7ebf\u5b9e\u73b0","text":"<ul> <li>\u4f7f\u7528\u5206\u79bb\u7684\u6307\u4ee4\u5b58\u50a8\u5668\u4e0e\u6570\u636e\u5b58\u50a8\u5668\uff0c\u901a\u5e38\u7528\u5206\u79bb\u7684\u6307\u4ee4\u7f13\u5b58\u548c\u6570\u636e\u7f13\u5b58\u5b9e\u73b0</li> <li>\u5728\u4e24\u4e2a\u9636\u6bb5\u90fd\u4f7f\u7528\u4e86\u5bc4\u5b58\u5668\u5806\uff1a\u5728 ID \u4e2d\u8fdb\u884c\u8bfb\u53d6\u3001\u5728 WB \u4e2d\u8fdb\u884c\u5199\u5165</li> <li>\u6d41\u6c34\u5316\u7684\u57fa\u672c\u6027\u80fd\u95ee\u9898</li> <li>\u6d41\u6c34\u7ebf\u4ea7\u751f\u5ef6\u8fdf</li> <li>\u6d41\u6c34\u7ebf\u5404\u7ea7\u4e4b\u95f4\u5931\u8861</li> <li>\u6d41\u6c34\u7ebf\u5f15\u5165\u989d\u5916\u7684\u5f00\u9500</li> <li>\u6d41\u6c34\u7ebf\u4e2d\u7684\u6307\u4ee4\u5e76\u975e\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u53ef\u80fd\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb</li> </ul>"},{"location":"4_pipelining/#_2","title":"\u6d41\u6c34\u7ebf\u7684\u4e3b\u8981\u969c\u788d\u2014\u2014\u6d41\u6c34\u7ebf\u5192\u9669","text":"<ul> <li>\u6709\u4e00\u4e9b\u79f0\u4e3a\u5192\u9669\u7684\u60c5\u5f62\uff0c\u963b\u6b62\u6307\u4ee4\u6d41\u4e2d\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u5728\u81ea\u5df1\u6307\u5b9a\u7684\u65f6\u949f\u5468\u671f\u5185\u6267\u884c\uff0c\u4ece\u800c\u5bfc\u81f4\u6d41\u6c34\u7ebf\u505c\u987f</li> <li>\u5192\u9669\u964d\u4f4e\u4e86\u6d41\u6c34\u5316\u6240\u83b7\u5f97\u7684\u7406\u60f3\u52a0\u901f\u6bd4\u7684\u6027\u80fd</li> <li>\u4e09\u79cd\u7c7b\u578b\u7684\u5192\u9669\uff1a\u7ed3\u6784\u5192\u9669\u3001\u6570\u636e\u5192\u9669\u3001\u63a7\u5236\u5192\u9669</li> </ul>"},{"location":"4_pipelining/#_3","title":"\u5e26\u6709\u505c\u987f\u7684\u6d41\u6c34\u7ebf\u6027\u80fd","text":"<ul> <li>\u6d41\u6c34\u5316\u52a0\u901f\u6bd4=\\frac{\u975e\u6d41\u6c34\u5316\u6307\u4ee4\u5e73\u5747\u6267\u884c\u65f6\u95f4}{\u6d41\u6c34\u5316\u6307\u4ee4\u5e73\u5747\u6267\u884c\u65f6\u95f4}=\\frac{\u975e\u6d41\u6c34\u5316CPI}{\u6d41\u6c34\u5316CPI}\\times \\frac{\u975e\u6d41\u6c34\u5316\u65f6\u949f\u5468\u671f}{\u6d41\u6c34\u5316\u65f6\u949f\u5468\u671f}</li> <li>\u6d41\u6c34\u5316CPI=1+\u6bcf\u6761\u6307\u4ee4\u7684\u6d41\u6c34\u7ebf\u505c\u987f\u65f6\u949f\u5468\u671f</li> <li>\u5982\u679c\u5ffd\u7565\u6d41\u6c34\u8bdd\u7684\u5468\u671f\u65f6\u95f4\u5f00\u9500\uff0c\u5e76\u5047\u5b9a\u6d41\u6c34\u7ea7\u4e4b\u95f4\u8fbe\u5230\u5b8c\u7f8e\u5e73\u8861\uff0c\u5219\u4e24\u4e2a\u5904\u7406\u5668\u7684\u5468\u671f\u65f6\u95f4\u76f8\u7b49\uff0c\u7531\u6b64\u5f97\u5230\uff1a \u52a0\u901f\u6bd4=\\frac{\u975e\u6d41\u6c34\u5316CPI}{1+\u6bcf\u6761\u6307\u4ee4\u7684\u6d41\u6c34\u7ebf\u505c\u987f\u5468\u671f}</li> <li>\u7b80\u5355\u8003\u8651\uff1a\u6240\u6709\u6307\u4ee4\u7684\u5468\u671f\u6570\u90fd\u76f8\u540c\uff0c\u5e76\u4e14\u5fc5\u7136\u7b49\u4e8e\u6d41\u6c34\u7ebf\u7ea7\u6570\uff08\u5373\u6d41\u6c34\u7ebf\u6df1\u5ea6\uff09\uff0c\u975e\u6d41\u6c34\u5316 CPI \u7b49\u4e8e\u6d41\u6c34\u7ebf\u6df1\u5ea6\uff0c\u5219\u6709\uff1a \u52a0\u901f\u6bd4=\\frac{\u6d41\u6c34\u7ebf\u6df1\u5ea6}{1+\u6bcf\u6761\u6307\u4ee4\u7684\u6d41\u6c34\u7ebf\u505c\u987f\u5468\u671f}</li> <li>\u5982\u679c\u6ca1\u6709\u6d41\u6c34\u7ebf\u505c\u987f\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\uff1a\u6d41\u6c34\u5316\u53ef\u4ee5\u4f7f\u6027\u80fd\u63d0\u9ad8\u7684\u500d\u6570\u4e3a\u6d41\u6c34\u7ebf\u6df1\u5ea6</li> </ul>"},{"location":"4_pipelining/#_4","title":"\u7ed3\u6784\u5192\u9669","text":"<ul> <li>\u5728\u91cd\u53e0\u6267\u884c\u6a21\u5f0f\u4e0b\uff0c\u5982\u679c\u786c\u4ef6\u65e0\u6cd5\u540c\u65f6\u652f\u6301\u6307\u4ee4\u7684\u6240\u6709\u7ec4\u5408\u65b9\u5f0f\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8d44\u6e90\u5192\u9669\uff0c\u4ece\u800c\u5bfc\u81f4\u7ed3\u6784\u5192\u9669</li> <li>\u53ef\u80fd\u53d1\u751f\u5728\u4e0d\u592a\u5e38\u7528\u7684\u7279\u6b8a\u7528\u9014\u529f\u80fd\u5355\u5143\uff0c\u901a\u5e38\u5e76\u975e\u6027\u80fd\u74f6\u9888</li> </ul>"},{"location":"4_pipelining/#data-dependence","title":"\u6570\u636e\u5192\u9669 (Data dependence)","text":"<ul> <li>\u5047\u8bbe\u6307\u4ee4i\u6309\u7167\u7a0b\u5e8f\u987a\u5e8f\u51fa\u73b0\u5728\u6307\u4ee4 j \u4e4b\u524d\uff0c\u4e24\u4e2a\u6307\u4ee4\u90fd\u4f7f\u7528\u5bc4\u5b58\u5668 x\uff0c\u53ef\u80fd\u51fa\u73b0\u4e09\u79cd\u5192\u9669\uff1a</li> <li>Flow dependence - read after write (RAW)\uff1a\u5f53\u6307\u4ee4 j \u5bf9\u5bc4\u5b58\u5668 x \u7684\u8bfb\u53d6\u53d1\u751f\u5728\u6307\u4ee4 i \u5bf9\u5bc4\u5b58\u5668 x \u7684\u5199\u4e4b\u524d\uff0c\u5c31\u4f1a\u53d1\u751f RAW \u5192\u9669</li> <li>Anti dependence - write after read (WAR)\uff1a\u5f53\u6307\u4ee4 i \u5bf9\u5bc4\u5b58\u5668 x \u7684\u8bfb\u53d6\u53d1\u751f\u5728\u6307\u4ee4 j \u5bf9\u5bc4\u5b58\u5668 x \u7684\u5199\u5165\u4e4b\u540e\uff0c\u8fd9\u65f6\u6307\u4ee4 i \u4f1a\u4f7f\u7528\u9519\u8bef\u7684 x \u503c</li> <li>Output dependence - write after write (WAW)\uff1a\u5f53\u6307\u4ee4 i \u5bf9\u5bc4\u5b58\u5668 x \u7684\u5199\u5165\u53d1\u751f\u5728\u6307\u4ee4 j \u5bf9\u5bc4\u5b58\u5668 x \u7684\u5199\u5165\u4e4b\u540e\u65f6\uff0c\u5bc4\u5b58\u5668 x \u4f1a\u4f20\u9001\u9519\u8bef\u7684\u503c  </li> <li>For all of them, we need to ensure semantics of the program is correct.</li> <li>Flow dependences always need to be obeyed because they constitute true dependence on a value.</li> <li>Anti and output dependences exist due to limited number of architectural registers. They depend on a name, not a value.</li> </ul>"},{"location":"4_pipelining/#five-fundamental-ways-of-handling-flow-dependences","title":"Five fundamental ways of handling flow dependences","text":"<ul> <li>detect and wait until value is available in register file</li> <li>detect and forward/bypass data to dependent instruction</li> <li>\u6765\u81ea EX/MEM \u548c MEM/WB \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u7684 ALU \u7ed3\u679c\u603b\u662f\u88ab\u53cd\u9988\u56de ALU \u7684\u8f93\u5165\u7aef</li> <li>\u5982\u679c\u524d\u9012\u786c\u4ef6\u68c0\u6d4b\u5230\u524d\u4e00\u4e2a ALU \u64cd\u4f5c\u5df2\u7ecf\u5bf9\u5f53\u524d ALU \u64cd\u4f5c\u7684\u6e90\u5bc4\u5b58\u5668\u8fdb\u884c\u4e86\u5199\u64cd\u4f5c\uff0c\u5219\u63a7\u5236\u903b\u8f91\u9009\u62e9\u524d\u9012\u7ed3\u679c\u4f5c\u4e3a ALU \u8f93\u5165\uff0c\u800c\u4e0d\u662f\u9009\u62e9\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u53d6\u7684\u503c</li> <li>ALU \u8f93\u5165\u65e2\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea\u76f8\u540c\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u7684\u524d\u9012\u8f93\u5165\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea\u4e0d\u540c\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u7684\u524d\u9012\u8f93\u5165</li> <li>\u53ef\u4ee5\u5c06\u524d\u9012\u6280\u672f\u52a0\u4ee5\u63a8\u5e7f\uff0c\u5c06\u7ed3\u679c\u76f4\u63a5\u4f20\u9001\u7ed9\u6240\u9700\u7684\u529f\u80fd\u5355\u5143</li> <li>detect and eliminate the dependence at the software level</li> <li>predict the needed values, execute \"speculatively\", and verify</li> <li>do something else (fine-grained multithreading), therefore no need to detect</li> </ul>"},{"location":"4_pipelining/#interlocking","title":"Interlocking","text":"<ul> <li>\u6d41\u6c34\u7ebf\u4e92\u9501\u4f1a\u68c0\u6d4b\u5192\u9669\uff0c\u5e76\u4f7f\u6d41\u6c34\u7ebf\u505c\u987f\uff0c\u76f4\u5230\u8be5\u51b2\u7a81\u88ab\u6e05\u9664</li> <li>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e92\u9501\u4f7f\u5f97\u6d41\u6c34\u7ebf\u505c\u987f\uff0c\u8ba9\u5e0c\u671b\u4f7f\u7528\u67d0\u4e00\u6570\u636e\u7684\u6307\u4ee4\u7b49\u5f85\uff0c\u76f4\u5230\u6e90\u6307\u4ee4\u751f\u6210\u8be5\u6570\u636e\u4e3a\u6b62</li> </ul>"},{"location":"4_pipelining/#approaches-to-dependence-detection","title":"Approaches to Dependence Detection","text":"<ul> <li>Scoreboarding</li> <li>each register in register file has a Valid bit associated with it</li> <li>an instruction that is writing to the register resets the valid bit</li> <li>an instruction in Decode stage checks if all its source and destination registers are valid, and stall the instruction if not valid</li> <li>Pro: simple 1 bit register</li> <li>Con: need to stall for all types of dependences</li> <li>Combinational dependence check logic</li> <li>special logic that checks if any instruction in later stages is supposed to write to any source register of the instruction that is being decoded</li> <li>Pro: no need to stall on anti and output dependences</li> <li>Con: logic is more complex</li> </ul>"},{"location":"4_pipelining/#control-dependence","title":"\u63a7\u5236\u5192\u9669 (Control dependence)","text":"<ul> <li>Data dependence on the Instruction Pointer/Program Counter</li> <li>All instructions are dependent on previous ones</li> <li>If the fetched instruction is a non-control-flow instruction</li> <li>next fetch PC is the address of the next sequential instruction</li> <li>easy to determine if we know the size of the fetched instruction</li> <li>If the instruction that is fetched is a control-flow instruction</li> <li>need to determine the next Fetch PC</li> <li>\u5728\u6267\u884c\u4e00\u4e2a\u5206\u652f\u540e\uff0c\u66f4\u65b0\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u7684\u503c\u53ef\u80fd\u7b49\u4e8e\uff08\u4e5f\u53ef\u80fd\u4e0d\u7b49\u4e8e\uff09\u5f53\u524d\u503c\u52a0 4.</li> <li>\u5982\u679c\u5206\u652f\u5c06\u7a0b\u5e8f\u8ba1\u6570\u5668\u5730\u5740\u6539\u4e3a\u5176\u76ee\u6807\u5730\u5740\uff0c\u5219\u5b83\u9009\u4e2d\u5206\u652f</li> <li>\u5982\u679c\u7a0b\u5e8f\u8ba1\u6570\u5668\u7684\u503c\u4f9d\u7136\u4e3a\u5f53\u524d\u503c\u52a04\uff0c\u5219\u5b83\u672a\u9009\u4e2d\u5206\u652f</li> </ul>"},{"location":"4_pipelining/#fundamental-ways-of-handling-control-dependences","title":"Fundamental Ways of Handling Control Dependences","text":"<ul> <li>Stall the pipeline until we know the next fetch address</li> <li>wait for the true-dependence on PC to resolve</li> <li>Branch Prediction: Guess the next fetch address</li> <li>One method: always guess NextPC = PC + 4 -&gt; a form of next fetch address prediction<ul> <li>Idea: Maximize the chances that the next sequential instruction is the next instruction to be executed</li> <li>Software level: Profile guided code positioning: lay out the control graph such that the \"likely next instruction is on the not-taken path of a branch</li> <li>Hardware level: Trace cache</li> <li>Idea: Get rid of control flow instructions/minimize their occurrence</li> <li>Get rid of unnecessary control flow instructions -&gt; predicate combining<ul> <li>combine predicate operations to feed a single branch instruction instead of having one branche for each</li> <li>use condition registers to store and operate on predicates</li> <li>Pro: fewer branches in code</li> <li>Con: possibly unnecessary work</li> </ul> </li> <li>Convert control dependences into data dependences -&gt; predicated execution<ul> <li>Pro: Always-not-taken prediction works better; compiler has more freedom to optimize the code</li> <li>Con: Useless work: some instructions fetched/executed but discarded</li> <li>requires additional ISA support</li> </ul> </li> </ul> </li> <li>Idea: Predict the next fetch address   Requires three things to be predicted at fetch stage:<ul> <li>Whether the fetched instruction is a branch</li> <li>can be accomplished using a BTB</li> <li>Conditional branch direction</li> <li>Branch target address (if taken)</li> <li>Observation: target address remains the same for a conditional direct branch across dynamic instances</li> <li>Idea: store the target address from previous instance and access it with PC</li> <li>called Branch Target Buffer (BTB), or Branch Target Address Cache</li> </ul> </li> <li>Branch Delay Slot: Employ delayed branching</li> <li>Change the semantics of a branch instruction: Branch after N instructions, branch after N cycles</li> <li>Idea: Delay the execution of a branch. N instructions that come after the branch are always executed regardless of branch direction</li> <li>Problem: Find instructions to fill the delay slots: branch must be independent of delay slot instructions, otherwise fix-up code is needed</li> <li>Fancy delayed branching: Delayed branch with squashing, if the branch is not taken, the delay slot instruction is not executed</li> <li>Advantages: Keeps the pipeline full with useful instructions in a simple way assuming that:<ul> <li>number of delay slots == number of instructions to keep the pipeline full before the branch resolves</li> <li>all delay slots can be filled with useful instructions</li> </ul> </li> <li>Disadvantages:<ul> <li>Not easy to fill the delay slots</li> <li>Ties ISA semantics to hardware implementation: could hinder future microarchitecture development</li> </ul> </li> <li>Fine-grained Multithreading</li> <li>Idea: Hardware has multiple thread contexts. Each cycle, fetch engine fetches from a different thread<ul> <li>By the time the fetched branch resolves, no instruction is fetched from the same thread</li> <li>Branch/Instruction resolution latency overlapped with execution of other threads' instructions</li> </ul> </li> <li>Pro:<ul> <li>No logic needed for handling control and data dependences within a thread</li> <li>Improved system throughput, latency tolerance, utilization</li> </ul> </li> <li>Con:<ul> <li>Single thread performance suffers</li> <li>Extra logic for keeping contexts</li> <li>Does not overlap latency if not enough threads to cover the whole pipeline</li> <li>Resource contention between threads in caches and memory</li> </ul> </li> <li>Predicated Execution: Eliminate control-flow instructions</li> <li>Idea: Compiler converts control dependence into data dependence -&gt; branch is eliminated</li> <li>Each instruction has a predicate bit set based on the predicate computation</li> <li>Only instructions with TRUE predicates are committed (others turned into NOPs)</li> <li>Advantages:<ul> <li>Eliminates mispredications for hard-to-predict branches</li> <li>Enables code optimizations hindered by the control dependency</li> </ul> </li> <li>Disadvantages:<ul> <li>Causes useless work for branches that are easy to predict</li> <li>Additional hardware and ISA support</li> <li>Cannot eliminate all hard to predict branches</li> </ul> </li> <li>Multipath Execution: Fetch from both possible paths</li> <li>Idea: execute both paths after a conditional branch</li> <li>Advantage: improves performance if misprediction cost &gt; useless work; no ISA changes needed</li> <li>Disadvantage: potentially growing paths; more complex hardware</li> </ul>"},{"location":"4_pipelining/#static-branch-prediction","title":"Static Branch Prediction","text":"<ul> <li>Always not-taken</li> <li>Simple to implement: no need for BTB</li> <li>Low accuracy ~30%-40%</li> <li>Always taken</li> <li>No direction prediction</li> <li>Better accuracy: 60%-70%</li> <li>Backward taken, forward not taken (BTFN)</li> <li>Profile-based</li> <li>Idea: Compiler determines likely direction for each branch using a profile run -&gt; encodes that direction as a hint bit in the branch instruction format</li> <li>Pro: per branch prediction</li> <li>Con: requires hint bits in the branch instruction format</li> <li>accuracy depends on dynamic branch behaviour</li> <li>Program-based</li> <li>Idea: use heuristics based on program analysis to determine statcially-predicted direction</li> <li>Programmer-based</li> <li>Idea: Programmer provides the statically-predicted direction</li> <li>Via pragmas in the programming language that qualify a branch as likely-taken versus likely-not-taken</li> <li>All previous techniques can be combined</li> <li>Disadvantages of these techniques:</li> <li>Cannot adapt to dynamic changes in branch behaviour</li> </ul>"},{"location":"4_pipelining/#dynamic-branch-prediction-hardware-based","title":"Dynamic Branch Prediction (hardware-based)","text":"<ul> <li>Last time predictor</li> <li>Single bit per branch (stored in BTB)</li> <li>Indicats which direction branch went last time it executed</li> <li>Downside: always mispredicts the last iteration and the first iteration of a loop branch<ul> <li>Accuracy for a loop with N iterations = (N-2)/N</li> </ul> </li> <li>Solution: add hysteresis to the predictor so taht prediction does not change on a single different outcome</li> <li>Two-Bit Counter Based Prediction</li> <li>Each branch associated with a two-bit counter</li> <li>One more bit provides hysteresis</li> <li>Accuracy for a loop with N iterations = (N-1)/N</li> <li>Downside: More hardware cost</li> <li>Global Branch Correlation</li> <li>Recently executed branch outcome in the execution path is correlated with the outcome of the next branch</li> <li>Idea: Associate branch outcomes with \"global T/NT history\" of an branches</li> <li>Implementation:<ul> <li>Keep track of the \"global T/NT history\" of all branches in a register -&gt; Global History Register (GHR)</li> <li>Use GHR to index into a table that recorded the outcome that was seen for each GHR value in the recent past -&gt; Pattern History Table</li> </ul> </li> <li>Two Level Global Branch Prediction<ul> <li>First level: Global branch history register (N bits) -&gt; the direction of last N branches</li> <li>Second level: Table of saturating counters for each history entry -&gt; the direction the branch took the last time the same history was seen</li> </ul> </li> <li>Improving Global Predictor Accuracy<ul> <li>Add more context information to the global predictor to take into account which branch is being predicted</li> <li>Gshare predictor: GHR hashed with the Branch PC</li> </ul> </li> <li>Local Branch Correlation</li> <li>Idea: Have a per-branch history register</li> <li>Associated the predicted outcome of a branch with \"T/NT history\" of the same branch</li> <li>Make a prediction based on the outcome of the branch the last time the same local branch history was encountered</li> <li>Uses two level of history (Per-branch history register + history at that history register value )<ul> <li>Fisrt level: a set of local history registers</li> <li>Second level: table of saturating counters for each history entry</li> </ul> </li> <li>Hybrid Branch Predictors</li> <li>Idea: use more than one type of predictor (i.e., multiple algorithms) and select the best prediction</li> <li>Advantages: better accuracy, reduced warmup time</li> <li>Biased Branches</li> <li>Observation: many branches are biaesd in one direction</li> <li>Problem: these branches pollute the branch prediction structures</li> <li>Solution: detect such biased branches, and predict them with a simpler predictor</li> </ul>"},{"location":"4_pipelining/#pipelining-and-precise-exceptions-preserving-sequential-semantics","title":"Pipelining and Precise Exceptions: Preserving Sequential Semantics","text":""},{"location":"4_pipelining/#multi-cycle-execution","title":"Multi-cycle Execution","text":"<ul> <li>Not all instrutions take the same amount of time for execution</li> <li>Idea: Have multiple different functional units that take different number of cycles</li> <li>Can be pipelined or not pipelined</li> <li>Can let independent instructions start execution on a different functional unit before a previous long-latency instruction finishes execution</li> </ul>"},{"location":"4_pipelining/#exceptions-vs-interrupts","title":"Exceptions vs. Interrupts","text":"<ul> <li>Cause</li> <li>Exceptions: internal to the running thread</li> <li>Interrupts: external to the running thread</li> <li>When to handle</li> <li>Exceptions: when detected and known to be non-speculative</li> <li>Interrupts: when convenient</li> </ul>"},{"location":"4_pipelining/#precise-exceptions-and-interrupts","title":"Precise Exceptions and Interrupts","text":"<p>The architectural state should be consistent when the exception/interrupt is ready to be handled.</p> <ol> <li>All previous instructions should be completely retired.</li> <li> <p>No later instruction should be retired.</p> </li> <li> <p>Why Precise Exceptions?</p> </li> <li>Semantics of the von Neumann model ISA specifies it</li> <li>Aids software debugging</li> <li>Enables easy recovery from exceptions, e.g. page faults</li> <li>Enables easily restartable processes</li> <li>Enables traps into software (e.g. software implemented opcodes)</li> </ol>"},{"location":"4_pipelining/#ensuring-precise-exceptions-in-pipelining","title":"Ensuring Precise Exceptions in Pipelining","text":""},{"location":"4_pipelining/#reorder-buffer-rob","title":"Reorder Buffer (ROB)","text":"<ul> <li>Idea: Complete instructions out-of-order, but reorder them before making results visible to architectural state\uff08\u5141\u8bb8\u6307\u4ee4\u4e71\u5e8f\u6267\u884c\uff0c\u5f3a\u5236\u5b83\u4eec\u987a\u5e8f\u63d0\u4ea4\uff09</li> <li>When instruction is decoded it reserves an entry in the ROB</li> <li>When instruction completes, it writes result into ROB entry</li> <li>When instruction oldest in ROB and it has completed without exceptions, its result moved to register file or memory</li> <li>\u91cd\u6392\u5e8f\u7f13\u51b2\u533a (ROB) \u4fdd\u5b58\u5df2\u7ecf\u5b8c\u6210\u6267\u884c\u4f46\u8fd8\u6ca1\u6709\u63d0\u4ea4\u7684\u6307\u4ee4\u7ed3\u679c</li> <li>An ROB entry consists of:</li> <li>DestRegID, DestRegVal</li> <li>StoreAddr, StoreData</li> <li>PC</li> <li>Valid bits for reg/data and control bits</li> <li>Exc?</li> <li>Problem: results first written to ROB, then to register file at commit time, what if a later operation needs a value in the ROB?</li> <li>Context addressable memory (CAM): Search the reorder buffer in a particular order to find the wanted register value (very complex when ROB becomes bigger, could become the critical path)</li> <li>Use indirection<ul> <li>access register file first</li> <li>if register not valid, register file stores the ID of the ROB entry that contains (or will contain) the value of the register</li> <li>practically the mapping of the register to a ROB entry: register file maps the register to a ROB entry if there is an in-flight instruction writing to the register</li> <li>access reorder buffer next</li> </ul> </li> <li>Important: Register Renaming with a Reorder Buffer</li> <li>Output and anti dependences are not true dependences. They exist due to lack of register IDs in the ISA</li> <li>The register ID is renamed to the reorder buffer entry that will hold the register's value<ul> <li>Register ID -&gt; ROB ID</li> <li>Architectural register ID -&gt; Physical register ID</li> </ul> </li> <li>Reorder Buffer Storage Cost</li> <li>Idea: Reduce ROB entry storage by specializing for different instruction types</li> <li>In-Order Pipeline with Reorder Buffer</li> <li>Decode (D): Access regfile/ROB, allocate entry in ROB, check if instruction can execute, if so dispatch execution</li> <li>Execute (E): Instructions can complete out-of-order</li> <li>Completion (R):Write result to reorder buffer</li> <li>Retirement/Commit (W): Check for exceptions, if none, write result to regfile/memory; else, flush pipeline and start from exception handler</li> <li>In-order dispatch/execution, out-of-order completion, in-order retirement</li> <li>Reorder Buffer Tradeoffs</li> <li>Advantages:<ul> <li>Comceptually simple for supporting precise exceptions</li> <li>Can eliminate false dependences</li> </ul> </li> <li>Disadvantages:<ul> <li>Reorder buffer needs to be accessed to get the results that are yet written to the regfile</li> <li>CAM or indirection</li> </ul> </li> <li>Other solutions to eliminate the disadvantages: history buffer, future file, checkpointing</li> </ul>"},{"location":"4_pipelining/#history-buffer-hb","title":"History Buffer (HB)","text":"<ul> <li>Idea: Update the register file when instruction completes, but undo updates when an exception occurs</li> <li>When instruction is decoded, it reserves an HB entry</li> <li>When the instruction completes, it stores the old value of its destination in the HB</li> <li>When instruction is oldest and no exceptions/interrupts, the HB entry is discarded</li> <li>When instruction is oldest and an exception needs to be handled, old values in the HB are written back into the architectural state from tail to head</li> <li>Advantage:</li> <li>Register file contains up-to-date values for incoming instructions</li> <li>Disadvantage:</li> <li>Need to read the old value of the destination register</li> <li>Need to unwind the history buffer upon an exception -&gt; increased exception/interrupt handling latency</li> </ul>"},{"location":"4_pipelining/#future-file-ff-rob","title":"Future File (FF) + ROB","text":"<ul> <li>Idea: Keep two register files (speculative and architecutural)</li> <li>Arch reg file: Updated in program order for precise exceptions</li> <li>Future reg file: Updated as soon as an instruction completes(if the instruction is the youngest one to write to a register)</li> <li>Future file is used for fast access to latest register values (speculative state) -&gt; Frontend register file</li> <li>Architectural file is used for state recovery on exceptions (architectural state) -&gt; Backend register file</li> <li>Advantage: no need to read new values from ROB or the old value of the destination register</li> <li>Disadvantage:</li> <li>multiple register files -&gt; more complex design</li> <li>need to copy arch. reg. file to future file on an exception</li> <li>In-Order Pipeline with Future File and ROB</li> <li>Decode (D): Access future file, allocate entry in ROB, check if instruction can execute, if so dispatch instruction</li> <li>Execute (E): Instructions can complete out-of-order</li> <li>Completion (R): Write result to reorder buffer and future file</li> <li>Retirement/Commit (W): Check for exceptions; if none, write result to architectural register file or memory; else, flush pipeline, copy architectural file to future file, and start from exception handler</li> <li>In-order dispatch/execution, out-of-order completion, in-order retirement</li> <li>Reduce the Overhead of Two Register Files</li> <li>Use indirection, i.e. pointers to data in frontend and retirement</li> <li>Have a single storage that stores register values</li> <li>Keep two register maps(speculative and architectural); also called register alias tables (RATs)</li> </ul>"},{"location":"4_pipelining/#pipelining-issues-branch-mispredictions","title":"Pipelining Issues: Branch Mispredictions","text":"<ul> <li>A branch misprediction resembles an \"exception\"</li> <li>How to do branch misprediction recovery? -&gt; similar to exception handling except that it can be initialted before the branch becomes the oldest instruction in the ROB</li> <li>Branch mispredictions are more common than exceptions</li> <li>Improving Branch State Recovery Latency</li> <li>Goal: Restore the frontend state(future file) such that the correct next instruction after the branch can execute right away after the branch misprediction is resolved</li> <li>Idea: Checkpoint the frontend register state/map at the time a branch is decoded and keep the checkpointed state updated with results of instructions older than the branch</li> </ul>"},{"location":"4_pipelining/#checkpointing","title":"Checkpointing","text":"<ul> <li>When a branch is decoded Make a copy of the future file and associate it with the branch</li> <li>When an instruction produces a register value All future file/map checkpoints that are younger than the instruction are updated with the value</li> <li>When a branch misprediction is detected</li> <li>Restore the checkpointed future file/map for the mispredicted branch when the branch misprediction is resolved</li> <li>Flush instructions in pipeline younger than the branch</li> <li>Deallocate checkpoints younger than the branch</li> <li>Advantages: correct frontend register state available right after checkpoint restoration -&gt; reduced state recovery latency</li> <li>Disadvantages: Storage overhead; complexity in managing checkpoints</li> </ul>"},{"location":"5_out_of_order_execution/","title":"Out-of-Order Execution","text":"<p>\u672c\u8282\u5185\u5bb9</p> <p>\u672c\u8282\u5185\u5bb9\u4e3b\u8981\u6765\u81ea\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff1a\u91cf\u5316\u7814\u7a76\u65b9\u6cd5\u300b\u7b2c\u56db\u7ae0\uff0c\u4ee5\u53ca CMU 447 \u7b2c 12 \u8bb2\u3002</p>"},{"location":"5_out_of_order_execution/#basic-idea-of-out-of-order-execution-dynamic-scheduling","title":"Basic Idea of Out-of-Order Execution (Dynamic Scheduling)","text":""},{"location":"5_out_of_order_execution/#an-in-order-pipeline","title":"An In-Order Pipeline","text":"<ul> <li>Problem: A true data dependency stalls dispatch of younger instructions into functional units</li> <li>Dispatch: Act of sending an instruction into a functional (execution) unit</li> </ul> <p>Warning</p> <p>Under development!</p>"}]}